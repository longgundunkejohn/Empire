using System;
using System.Collections.Generic;
using System.Linq;

namespace Empire.Shared.Models
{
    public class EmpirePlayer
    {
        public string PlayerId { get; set; } = string.Empty;
        public string Name { get; set; } = string.Empty;
        
        // Empire-specific game state
        public int Morale { get; set; } = 25; // 25 â†’ 0 (lose condition)
        public int CurrentTier { get; set; } = 1; // I-IV (1-4) based on settled territories
        public int AvailableMana { get; set; } = 0; // Generated by exerting villagers
        
        // Deck and hand management
        public List<Card> ArmyDeck { get; set; } = new(); // 30 cards
        public List<Card> CivicDeck { get; set; } = new(); // 15 cards
        public List<int> ArmyHand { get; set; } = new(); // Card IDs in army hand
        public List<int> CivicHand { get; set; } = new(); // Card IDs in civic hand
        
        // Board zones
        public List<int> Heartland { get; set; } = new(); // Safe units
        public List<int> Villagers { get; set; } = new(); // Villagers in heartland
        public List<int> Graveyard { get; set; } = new(); // Dead units, used tactics
        
        // Territory presence
        public Dictionary<string, List<int>> TerritoriesAdvancing { get; set; } = new(); // Units advancing
        public Dictionary<string, List<int>> TerritoriesOccupying { get; set; } = new(); // Units occupying
        public Dictionary<string, List<int>> TerritoriesSettlements { get; set; } = new(); // Settlements
        
        // Round-based restrictions
        public bool HasPlayedVillagerThisRound { get; set; } = false;
        public bool HasSettledThisRound { get; set; } = false;
        public bool HasCommittedThisRound { get; set; } = false;
        
        public EmpirePlayer() 
        {
            InitializeTerritories();
        }
        
        public EmpirePlayer(string playerId, string name)
        {
            PlayerId = playerId;
            Name = name;
            InitializeTerritories();
        }
        
        private void InitializeTerritories()
        {
            // Initialize all territory dictionaries
            for (int i = 1; i <= 3; i++)
            {
                string territoryId = $"territory-{i}";
                TerritoriesAdvancing[territoryId] = new List<int>();
                TerritoriesOccupying[territoryId] = new List<int>();
                TerritoriesSettlements[territoryId] = new List<int>();
            }
        }
        
        // Game setup methods
        public void SetupStartingHand()
        {
            // Draw 4 Army cards and 3 Civic cards for opening hand
            ArmyHand = DrawFromDeck(ArmyDeck, 4);
            CivicHand = DrawFromDeck(CivicDeck, 3);
        }
        
        public void Mulligan(List<int> armyCardsToMulligan, List<int> civicCardsToMulligan)
        {
            // Put aside cards, draw new ones, shuffle the put-aside cards back
            var armyCardsToShuffle = new List<Card>();
            var civicCardsToShuffle = new List<Card>();
            
            // Remove cards from hand and prepare for shuffling
            foreach (int cardId in armyCardsToMulligan)
            {
                if (ArmyHand.Remove(cardId))
                {
                    var card = ArmyDeck.FirstOrDefault(c => c.CardId == cardId);
                    if (card != null) armyCardsToShuffle.Add(card);
                }
            }
            
            foreach (int cardId in civicCardsToMulligan)
            {
                if (CivicHand.Remove(cardId))
                {
                    var card = CivicDeck.FirstOrDefault(c => c.CardId == cardId);
                    if (card != null) civicCardsToShuffle.Add(card);
                }
            }
            
            // Draw replacement cards
            ArmyHand.AddRange(DrawFromDeck(ArmyDeck, armyCardsToMulligan.Count));
            CivicHand.AddRange(DrawFromDeck(CivicDeck, civicCardsToMulligan.Count));
            
            // Shuffle mulliganed cards back into decks
            ArmyDeck.AddRange(armyCardsToShuffle);
            CivicDeck.AddRange(civicCardsToShuffle);
            ShuffleDeck(ArmyDeck);
            ShuffleDeck(CivicDeck);
        }
        
        // Helper methods
        public int GetSettledTerritoryCount()
        {
            return TerritoriesSettlements.Values.Count(territory => territory.Count > 0);
        }
        
        public void UpdateTier()
        {
            CurrentTier = 1 + GetSettledTerritoryCount(); // Tier I + settled territories (max IV)
            if (CurrentTier > 4) CurrentTier = 4;
        }
        
        public int CalculateAvailableMana()
        {
            // In Empire, mana is generated by exerting villagers
            // This is a simplified calculation - will be refined with exertion system
            return Villagers.Count;
        }
        
        public bool CanAffordCard(Card card)
        {
            return card.CanBeDeployed(CurrentTier, AvailableMana);
        }
        
        public bool IsOccupyingTerritory(string territoryId)
        {
            return TerritoriesOccupying.ContainsKey(territoryId) && 
                   TerritoriesOccupying[territoryId].Count > 0;
        }
        
        public bool HasSettlementInTerritory(string territoryId)
        {
            return TerritoriesSettlements.ContainsKey(territoryId) && 
                   TerritoriesSettlements[territoryId].Count > 0;
        }
        
        public List<int> GetAllUnitsInTerritories()
        {
            var allUnits = new List<int>();
            foreach (var territory in TerritoriesAdvancing.Values)
            {
                allUnits.AddRange(territory);
            }
            foreach (var territory in TerritoriesOccupying.Values)
            {
                allUnits.AddRange(territory);
            }
            return allUnits;
        }
        
        public void ResetRoundRestrictions()
        {
            HasPlayedVillagerThisRound = false;
            HasSettledThisRound = false;
            HasCommittedThisRound = false;
        }
        
        public void DrawCards(bool drawArmy = true)
        {
            if (drawArmy)
            {
                // Draw 1 Army card
                var drawnCards = DrawFromDeck(ArmyDeck, 1);
                ArmyHand.AddRange(drawnCards);
            }
            else
            {
                // Draw 2 Civic cards
                var drawnCards = DrawFromDeck(CivicDeck, 2);
                CivicHand.AddRange(drawnCards);
            }
        }
        
        private List<int> DrawFromDeck(List<Card> deck, int count)
        {
            var drawnCardIds = new List<int>();
            for (int i = 0; i < count && deck.Count > 0; i++)
            {
                var card = deck[0];
                deck.RemoveAt(0);
                drawnCardIds.Add(card.CardId);
            }
            return drawnCardIds;
        }
        
        private void ShuffleDeck(List<Card> deck)
        {
            var random = new Random();
            for (int i = deck.Count - 1; i > 0; i--)
            {
                int j = random.Next(i + 1);
                (deck[i], deck[j]) = (deck[j], deck[i]);
            }
        }
    }
}
