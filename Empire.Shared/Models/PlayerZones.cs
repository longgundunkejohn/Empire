using System.Collections.Generic;

namespace Empire.Shared.Models
{
    public class PlayerZones
    {
        // Empire-specific zones
        public List<int> ArmyHand { get; set; } = new(); // Army cards in hand
        public List<int> CivicHand { get; set; } = new(); // Civic cards in hand
        public List<int> Heartland { get; set; } = new(); // Safe units (not in combat)
        public List<int> Villagers { get; set; } = new(); // Villagers in heartland
        public List<Card> ArmyDeck { get; set; } = new(); // Army deck (30 cards)
        public List<Card> CivicDeck { get; set; } = new(); // Civic deck (15 cards)
        public List<int> Graveyard { get; set; } = new(); // Dead units, used tactics
        
        // Territory presence (units in territories)
        public Dictionary<string, List<int>> TerritoriesAdvancing { get; set; } = new(); // Units advancing into territories
        public Dictionary<string, List<int>> TerritoriesOccupying { get; set; } = new(); // Units occupying territories
        public Dictionary<string, List<int>> TerritoriesSettlements { get; set; } = new(); // Settlements in territories
        
        // Player stats
        public int Morale { get; set; } = 25; // 25 → 0 (lose condition)
        public int CurrentTier { get; set; } = 1; // I-IV based on settled territories
        public int AvailableMana { get; set; } = 0; // Generated by exerting villagers
        
        // Legacy/Compatibility (keeping for now)
        public List<Card> Deck { get; set; } = new();
        public List<int> Hand { get; set; } = new();
        public List<BoardCard> Board { get; set; } = new();
        
        public PlayerZones()
        {
            // Initialize territory dictionaries
            TerritoriesAdvancing["territory-1"] = new List<int>();
            TerritoriesAdvancing["territory-2"] = new List<int>();
            TerritoriesAdvancing["territory-3"] = new List<int>();
            
            TerritoriesOccupying["territory-1"] = new List<int>();
            TerritoriesOccupying["territory-2"] = new List<int>();
            TerritoriesOccupying["territory-3"] = new List<int>();
            
            TerritoriesSettlements["territory-1"] = new List<int>();
            TerritoriesSettlements["territory-2"] = new List<int>();
            TerritoriesSettlements["territory-3"] = new List<int>();
        }
        
        // Helper methods
        public int GetSettledTerritoryCount()
        {
            int count = 0;
            foreach (var territory in TerritoriesSettlements.Values)
            {
                if (territory.Count > 0) count++;
            }
            return count;
        }
        
        public void UpdateTier()
        {
            CurrentTier = 1 + GetSettledTerritoryCount(); // Tier I + settled territories
        }
        
        public int CalculateAvailableMana()
        {
            // In Empire, mana is generated by exerting villagers
            // For now, we'll calculate based on unexerted villagers
            // This will be refined when we implement the full mana system
            return Villagers.Count; // Simplified for now
        }
        
        public List<int> GetAllUnitsInTerritories()
        {
            var allUnits = new List<int>();
            foreach (var territory in TerritoriesAdvancing.Values)
            {
                allUnits.AddRange(territory);
            }
            foreach (var territory in TerritoriesOccupying.Values)
            {
                allUnits.AddRange(territory);
            }
            return allUnits;
        }
        
        public bool IsOccupyingTerritory(string territoryId)
        {
            return TerritoriesOccupying.ContainsKey(territoryId) && 
                   TerritoriesOccupying[territoryId].Count > 0;
        }
        
        public bool HasSettlementInTerritory(string territoryId)
        {
            return TerritoriesSettlements.ContainsKey(territoryId) && 
                   TerritoriesSettlements[territoryId].Count > 0;
        }
    }
}
