@using Empire.Shared.Models
@using Empire.Shared.Models.Enums
@using Empire.Client.Services
@inject GameHubService GameHub
@inject IJSRuntime JSRuntime

<div class="manual-play-controls">
    <!-- Game State Display -->
    <div class="game-state-panel">
        <div class="game-info">
            <div class="phase-info">
                <span class="phase-label">Phase:</span>
                <span class="phase-value">@CurrentPhase</span>
            </div>
            <div class="round-info">
                <span class="round-label">Round:</span>
                <span class="round-value">@CurrentRound</span>
            </div>
            <div class="initiative-info">
                <span class="initiative-label">Initiative:</span>
                <span class="initiative-value">@InitiativeHolder</span>
            </div>
        </div>

        <!-- Player Stats -->
        <div class="player-stats">
            <div class="player-stat">
                <span class="stat-label">Morale:</span>
                <span class="stat-value morale">@PlayerMorale</span>
                <div class="morale-controls">
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => AdjustMorale(-1)">-1</button>
                    <button class="btn btn-sm btn-outline-danger" @onclick="() => AdjustMorale(-5)">-5</button>
                    <button class="btn btn-sm btn-outline-success" @onclick="() => AdjustMorale(1)">+1</button>
                    <button class="btn btn-sm btn-outline-success" @onclick="() => AdjustMorale(5)">+5</button>
                </div>
            </div>
            <div class="player-stat">
                <span class="stat-label">Tier:</span>
                <span class="stat-value tier">@PlayerTier</span>
                <div class="tier-controls">
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SetTier(1)">I</button>
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SetTier(2)">II</button>
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SetTier(3)">III</button>
                    <button class="btn btn-sm btn-outline-primary" @onclick="() => SetTier(4)">IV</button>
                </div>
            </div>
        </div>
    </div>

    <!-- Priority Controls -->
    <div class="priority-controls">
        <h5>Priority Controls</h5>
        <div class="priority-buttons">
            <button class="btn btn-primary" @onclick="PassActionPriority" disabled="@(!HasActionPriority)">
                Pass Action Priority
            </button>
            <button class="btn btn-warning" @onclick="PassInitiative" disabled="@(!HasInitiative)">
                Pass Initiative
            </button>
        </div>
    </div>

    <!-- Phase Controls -->
    <div class="phase-controls">
        <h5>Phase Controls</h5>
        <div class="phase-buttons">
            <button class="btn btn-outline-secondary" @onclick="() => AdvancePhase(GamePhase.Strategy)">
                Strategy Phase
            </button>
            <button class="btn btn-outline-secondary" @onclick="() => AdvancePhase(GamePhase.Battle)">
                Battle Phase
            </button>
            <button class="btn btn-outline-secondary" @onclick="() => AdvancePhase(GamePhase.Replenishment)">
                Replenishment
            </button>
            <button class="btn btn-outline-info" @onclick="AdvanceRound">
                Next Round
            </button>
        </div>
    </div>

    <!-- Deck Controls -->
    <div class="deck-controls">
        <h5>Deck Actions</h5>
        <div class="deck-buttons">
            <div class="army-deck-controls">
                <span class="deck-label">Army Deck:</span>
                <button class="btn btn-sm btn-outline-primary" @onclick="() => DrawCards('Army', 1)">
                    Draw 1
                </button>
                <button class="btn btn-sm btn-outline-primary" @onclick="() => DrawCards('Army', 2)">
                    Draw 2
                </button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ShuffleDeck('Army')">
                    Shuffle
                </button>
            </div>
            <div class="civic-deck-controls">
                <span class="deck-label">Civic Deck:</span>
                <button class="btn btn-sm btn-outline-success" @onclick="() => DrawCards('Civic', 1)">
                    Draw 1
                </button>
                <button class="btn btn-sm btn-outline-success" @onclick="() => DrawCards('Civic', 2)">
                    Draw 2
                </button>
                <button class="btn btn-sm btn-outline-secondary" @onclick="() => ShuffleDeck('Civic')">
                    Shuffle
                </button>
            </div>
        </div>
    </div>

    <!-- Batch Actions -->
    <div class="batch-actions">
        <h5>Batch Actions</h5>
        <div class="batch-buttons">
            <button class="btn btn-outline-info" @onclick="UntapAllUnits">
                Untap All Units
            </button>
            <button class="btn btn-outline-warning" @onclick="ShowReplenishmentDialog">
                Replenishment
            </button>
        </div>
    </div>

    <!-- Chat -->
    <div class="chat-section">
        <h5>Game Chat</h5>
        <div class="chat-messages" id="chat-messages">
            @foreach (var message in ChatMessages)
            {
                <div class="chat-message">
                    <span class="chat-timestamp">@message.Timestamp.ToString("HH:mm")</span>
                    <span class="chat-player">@message.PlayerId:</span>
                    <span class="chat-text">@message.Message</span>
                </div>
            }
        </div>
        <div class="chat-input">
            <input type="text" class="form-control" @bind="ChatInput" @onkeypress="OnChatKeyPress" placeholder="Type a message..." />
            <button class="btn btn-primary" @onclick="SendChatMessage">Send</button>
        </div>
    </div>
</div>

<!-- Replenishment Modal -->
@if (ShowReplenishment)
{
    <div class="modal fade show" style="display: block;" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Replenishment Phase</h5>
                    <button type="button" class="btn-close" @onclick="CloseReplenishmentDialog"></button>
                </div>
                <div class="modal-body">
                    <p>Choose your replenishment action:</p>
                    <div class="replenishment-options">
                        <button class="btn btn-primary me-2" @onclick="() => ReplenishmentChoice('Army')">
                            Draw 1 Army Card
                        </button>
                        <button class="btn btn-success" @onclick="() => ReplenishmentChoice('Civic')">
                            Draw 2 Civic Cards
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="modal-backdrop fade show"></div>
}

@code {
    [Parameter] public string GameId { get; set; } = "";
    [Parameter] public string PlayerId { get; set; } = "";
    [Parameter] public GamePhase CurrentPhase { get; set; } = GamePhase.Strategy;
    [Parameter] public int CurrentRound { get; set; } = 1;
    [Parameter] public string InitiativeHolder { get; set; } = "";
    [Parameter] public int PlayerMorale { get; set; } = 25;
    [Parameter] public int PlayerTier { get; set; } = 1;
    [Parameter] public bool HasActionPriority { get; set; } = false;
    [Parameter] public bool HasInitiative { get; set; } = false;

    private string ChatInput = "";
    private bool ShowReplenishment = false;
    private List<ChatMessage> ChatMessages = new();

    public class ChatMessage
    {
        public string PlayerId { get; set; } = "";
        public string Message { get; set; } = "";
        public DateTime Timestamp { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        // Subscribe to manual play events
        GameHub.OnChatMessageManual += OnChatMessageReceived;
        GameHub.OnActionPriorityPassed += OnActionPriorityPassed;
        GameHub.OnPhaseAdvanced += OnPhaseAdvanced;
        GameHub.OnRoundAdvanced += OnRoundAdvanced;
        GameHub.OnMoraleAdjustedManual += OnMoraleAdjusted;
        GameHub.OnTierSet += OnTierSet;
        GameHub.OnCardsDrawn += OnCardsDrawn;
        GameHub.OnDeckShuffled += OnDeckShuffled;
        GameHub.OnAllUnitsUntapped += OnAllUnitsUntapped;
    }

    private async Task PassActionPriority()
    {
        await GameHub.PassActionPriorityManual(GameId, PlayerId);
        AddChatMessage(PlayerId, "passed action priority", true);
    }

    private async Task PassInitiative()
    {
        await GameHub.PassInitiativeManual(GameId, PlayerId);
        AddChatMessage(PlayerId, "passed initiative", true);
    }

    private async Task AdvancePhase(GamePhase newPhase)
    {
        await GameHub.AdvancePhaseManual(GameId, PlayerId, newPhase);
        AddChatMessage(PlayerId, $"advanced to {newPhase} phase", true);
    }

    private async Task AdvanceRound()
    {
        var newRound = CurrentRound + 1;
        await GameHub.AdvanceRoundManual(GameId, PlayerId, newRound);
        AddChatMessage(PlayerId, $"advanced to round {newRound}", true);
    }

    private async Task AdjustMorale(int amount)
    {
        await GameHub.AdjustMoraleManual(GameId, PlayerId, amount);
        var action = amount > 0 ? "gained" : "lost";
        AddChatMessage(PlayerId, $"{action} {Math.Abs(amount)} morale", true);
    }

    private async Task SetTier(int newTier)
    {
        await GameHub.SetTierManual(GameId, PlayerId, newTier);
        AddChatMessage(PlayerId, $"set tier to {newTier}", true);
    }

    private async Task DrawCards(string deckType, int count)
    {
        await GameHub.DrawCardsManual(GameId, PlayerId, deckType, count);
        AddChatMessage(PlayerId, $"drew {count} {deckType} card(s)", true);
    }

    private async Task ShuffleDeck(string deckType)
    {
        await GameHub.ShuffleDeckManual(GameId, PlayerId, deckType);
        AddChatMessage(PlayerId, $"shuffled {deckType} deck", true);
    }

    private async Task UntapAllUnits()
    {
        await GameHub.UntapAllUnitsManual(GameId, PlayerId);
        AddChatMessage(PlayerId, "untapped all units", true);
    }

    private void ShowReplenishmentDialog()
    {
        ShowReplenishment = true;
        StateHasChanged();
    }

    private void CloseReplenishmentDialog()
    {
        ShowReplenishment = false;
        StateHasChanged();
    }

    private async Task ReplenishmentChoice(string choice)
    {
        if (choice == "Army")
        {
            await DrawCards("Army", 1);
        }
        else
        {
            await DrawCards("Civic", 2);
        }
        
        await UntapAllUnits();
        CloseReplenishmentDialog();
        AddChatMessage(PlayerId, $"completed replenishment (chose {choice})", true);
    }

    private async Task SendChatMessage()
    {
        if (!string.IsNullOrWhiteSpace(ChatInput))
        {
            await GameHub.SendChatMessageManual(GameId, PlayerId, ChatInput);
            ChatInput = "";
            StateHasChanged();
        }
    }

    private async Task OnChatKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendChatMessage();
        }
    }

    private void AddChatMessage(string playerId, string message, bool isSystemMessage = false)
    {
        ChatMessages.Add(new ChatMessage
        {
            PlayerId = isSystemMessage ? $"[{playerId}]" : playerId,
            Message = message,
            Timestamp = DateTime.Now
        });

        // Keep only last 50 messages
        if (ChatMessages.Count > 50)
        {
            ChatMessages.RemoveAt(0);
        }

        StateHasChanged();
        
        // Scroll to bottom
        _ = Task.Run(async () =>
        {
            await Task.Delay(100);
            await JSRuntime.InvokeVoidAsync("scrollToBottom", "chat-messages");
        });
    }

    // Event handlers
    private async Task OnChatMessageReceived(string playerId, string message, DateTime timestamp)
    {
        ChatMessages.Add(new ChatMessage
        {
            PlayerId = playerId,
            Message = message,
            Timestamp = timestamp
        });
        StateHasChanged();
    }

    private async Task OnActionPriorityPassed(string playerId)
    {
        AddChatMessage(playerId, "passed action priority", true);
    }

    private async Task OnPhaseAdvanced(string playerId, string newPhase)
    {
        AddChatMessage(playerId, $"advanced to {newPhase} phase", true);
    }

    private async Task OnRoundAdvanced(string playerId, int newRound)
    {
        AddChatMessage(playerId, $"advanced to round {newRound}", true);
    }

    private async Task OnMoraleAdjusted(string playerId, int amount)
    {
        var action = amount > 0 ? "gained" : "lost";
        AddChatMessage(playerId, $"{action} {Math.Abs(amount)} morale", true);
    }

    private async Task OnTierSet(string playerId, int newTier)
    {
        AddChatMessage(playerId, $"set tier to {newTier}", true);
    }

    private async Task OnCardsDrawn(string playerId, string deckType, int count)
    {
        AddChatMessage(playerId, $"drew {count} {deckType} card(s)", true);
    }

    private async Task OnDeckShuffled(string playerId, string deckType)
    {
        AddChatMessage(playerId, $"shuffled {deckType} deck", true);
    }

    private async Task OnAllUnitsUntapped(string playerId)
    {
        AddChatMessage(playerId, "untapped all units", true);
    }

    public void Dispose()
    {
        // Unsubscribe from events
        GameHub.OnChatMessageManual -= OnChatMessageReceived;
        GameHub.OnActionPriorityPassed -= OnActionPriorityPassed;
        GameHub.OnPhaseAdvanced -= OnPhaseAdvanced;
        GameHub.OnRoundAdvanced -= OnRoundAdvanced;
        GameHub.OnMoraleAdjustedManual -= OnMoraleAdjusted;
        GameHub.OnTierSet -= OnTierSet;
        GameHub.OnCardsDrawn -= OnCardsDrawn;
        GameHub.OnDeckShuffled -= OnDeckShuffled;
        GameHub.OnAllUnitsUntapped -= OnAllUnitsUntapped;
    }
}

<style>
    .manual-play-controls {
        background: rgba(0, 0, 0, 0.8);
        border-radius: 8px;
        padding: 15px;
        margin: 10px;
        color: white;
        max-width: 350px;
        max-height: 80vh;
        overflow-y: auto;
    }

    .game-state-panel {
        margin-bottom: 15px;
        padding: 10px;
        background: rgba(255, 255, 255, 0.1);
        border-radius: 5px;
    }

    .game-info {
        display: flex;
        justify-content: space-between;
        margin-bottom: 10px;
        font-size: 0.9em;
    }

    .player-stats {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .player-stat {
        display: flex;
        align-items: center;
        gap: 10px;
    }

    .stat-label {
        font-weight: bold;
        min-width: 60px;
    }

    .stat-value {
        font-weight: bold;
        min-width: 30px;
    }

    .stat-value.morale {
        color: #ff6b6b;
    }

    .stat-value.tier {
        color: #4ecdc4;
    }

    .morale-controls, .tier-controls {
        display: flex;
        gap: 5px;
    }

    .priority-controls, .phase-controls, .deck-controls, .batch-actions {
        margin-bottom: 15px;
        padding: 10px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 5px;
    }

    .priority-controls h5, .phase-controls h5, .deck-controls h5, .batch-actions h5 {
        margin-bottom: 10px;
        font-size: 1em;
        color: #ffd93d;
    }

    .priority-buttons, .phase-buttons, .batch-buttons {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .deck-buttons {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .army-deck-controls, .civic-deck-controls {
        display: flex;
        align-items: center;
        gap: 8px;
        flex-wrap: wrap;
    }

    .deck-label {
        font-weight: bold;
        min-width: 80px;
        font-size: 0.9em;
    }

    .chat-section {
        margin-top: 15px;
        padding: 10px;
        background: rgba(255, 255, 255, 0.05);
        border-radius: 5px;
    }

    .chat-section h5 {
        margin-bottom: 10px;
        font-size: 1em;
        color: #ffd93d;
    }

    .chat-messages {
        height: 150px;
        overflow-y: auto;
        background: rgba(0, 0, 0, 0.3);
        border-radius: 3px;
        padding: 8px;
        margin-bottom: 10px;
        font-size: 0.8em;
    }

    .chat-message {
        margin-bottom: 5px;
        line-height: 1.3;
    }

    .chat-timestamp {
        color: #888;
        margin-right: 5px;
    }

    .chat-player {
        font-weight: bold;
        color: #4ecdc4;
        margin-right: 5px;
    }

    .chat-text {
        color: #fff;
    }

    .chat-input {
        display: flex;
        gap: 8px;
    }

    .chat-input input {
        flex: 1;
        font-size: 0.9em;
    }

    .replenishment-options {
        display: flex;
        gap: 10px;
        justify-content: center;
    }

    .btn-sm {
        font-size: 0.8em;
        padding: 4px 8px;
    }

    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

<script>
    window.scrollToBottom = (elementId) => {
        const element = document.getElementById(elementId);
        if (element) {
            element.scrollTop = element.scrollHeight;
        }
    };
</script>
