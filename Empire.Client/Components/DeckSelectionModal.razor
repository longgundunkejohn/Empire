@using Empire.Shared.Models
@using Empire.Client.Services
@inject DeckService DeckService
@inject IJSRuntime JSRuntime

<div class="modal fade @(IsVisible ? "show" : "")" style="display: @(IsVisible ? "block" : "none")" tabindex="-1" role="dialog">
    <div class="modal-dialog modal-lg" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">
                    <i class="fas fa-cards-blank"></i>
                    Select Your Deck
                </h5>
                <button type="button" class="btn-close" @onclick="Close"></button>
            </div>
            <div class="modal-body">
                @if (isLoading)
                {
                    <div class="text-center py-4">
                        <div class="spinner-border text-primary" role="status">
                            <span class="visually-hidden">Loading decks...</span>
                        </div>
                        <p class="mt-2">Loading your decks...</p>
                    </div>
                }
                else if (userDecks?.Any() == true)
                {
                    <div class="deck-selection-grid">
                        @foreach (var deck in userDecks)
                        {
                            <div class="deck-card @(selectedDeck?.Id == deck.Id ? "selected" : "")" 
                                 @onclick="() => SelectDeck(deck)">
                                <div class="deck-header">
                                    <h6 class="deck-name">@deck.Name</h6>
                                    <span class="deck-format badge bg-secondary">Empire TCG</span>
                                </div>
                                <div class="deck-stats">
                                    <div class="stat-item">
                                        <i class="fas fa-sword"></i>
                                        <span>@deck.ArmyCardCount Army</span>
                                    </div>
                                    <div class="stat-item">
                                        <i class="fas fa-building"></i>
                                        <span>@deck.CivicCardCount Civic</span>
                                    </div>
                                    <div class="stat-item">
                                        <i class="fas fa-layer-group"></i>
                                        <span>@(deck.ArmyCardCount + deck.CivicCardCount) Total</span>
                                    </div>
                                </div>
                                <div class="deck-validation">
                                    @if (deck.IsValid)
                                    {
                                        <span class="badge bg-success">
                                            <i class="fas fa-check"></i> Valid
                                        </span>
                                    }
                                    else
                                    {
                                        <span class="badge bg-warning">
                                            <i class="fas fa-exclamation-triangle"></i> Invalid
                                        </span>
                                    }
                                </div>
                                @if (selectedDeck?.Id == deck.Id)
                                {
                                    <div class="selected-indicator">
                                        <i class="fas fa-check-circle"></i>
                                    </div>
                                }
                            </div>
                        }
                    </div>
                    
                    @if (selectedDeck != null && !selectedDeck.IsValid)
                    {
                        <div class="alert alert-warning mt-3">
                            <i class="fas fa-exclamation-triangle"></i>
                            <strong>Invalid Deck:</strong> This deck doesn't meet the requirements (30 Army + 15 Civic cards).
                            You can still select it, but you may not be able to start the game.
                        </div>
                    }
                }
                else
                {
                    <div class="no-decks-message text-center py-4">
                        <i class="fas fa-cards-blank fa-3x text-muted mb-3"></i>
                        <h5>No Decks Found</h5>
                        <p class="text-muted">You haven't created any decks yet.</p>
                        <button class="btn btn-primary" @onclick="NavigateToDeckBuilder">
                            <i class="fas fa-plus"></i> Create Your First Deck
                        </button>
                    </div>
                }

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-3">
                        <i class="fas fa-exclamation-circle"></i>
                        @errorMessage
                    </div>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="Close">
                    Cancel
                </button>
                @if (userDecks?.Any() == true)
                {
                    <button type="button" class="btn btn-outline-primary" @onclick="NavigateToDeckBuilder">
                        <i class="fas fa-edit"></i> Manage Decks
                    </button>
                    <button type="button" class="btn btn-primary" 
                            disabled="@(selectedDeck == null)" 
                            @onclick="ConfirmSelection">
                        <i class="fas fa-check"></i> Select Deck
                    </button>
                }
            </div>
        </div>
    </div>
</div>

@if (IsVisible)
{
    <div class="modal-backdrop fade show"></div>
}

<style>
    .deck-selection-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
        gap: 15px;
        max-height: 400px;
        overflow-y: auto;
        padding: 10px;
    }

    .deck-card {
        border: 2px solid #dee2e6;
        border-radius: 8px;
        padding: 15px;
        cursor: pointer;
        transition: all 0.3s ease;
        position: relative;
        background: white;
    }

    .deck-card:hover {
        border-color: #007bff;
        box-shadow: 0 2px 8px rgba(0,123,255,0.2);
    }

    .deck-card.selected {
        border-color: #28a745;
        background: #f8fff9;
        box-shadow: 0 2px 8px rgba(40,167,69,0.3);
    }

    .deck-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 10px;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }

    .deck-name {
        margin: 0;
        color: #333;
        font-weight: 600;
    }

    .deck-stats {
        display: flex;
        flex-direction: column;
        gap: 5px;
        margin-bottom: 10px;
    }

    .stat-item {
        display: flex;
        align-items: center;
        gap: 8px;
        font-size: 0.9rem;
        color: #666;
    }

    .stat-item i {
        width: 16px;
        text-align: center;
    }

    .deck-validation {
        margin-top: 10px;
    }

    .selected-indicator {
        position: absolute;
        top: 10px;
        right: 10px;
        color: #28a745;
        font-size: 1.2rem;
    }

    .no-decks-message {
        padding: 40px 20px;
    }

    .modal-backdrop {
        background-color: rgba(0, 0, 0, 0.5);
    }

    .modal.show {
        background-color: rgba(0, 0, 0, 0.5);
    }
</style>

@code {
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public EventCallback<bool> IsVisibleChanged { get; set; }
    [Parameter] public EventCallback<UserDeck> OnDeckSelected { get; set; }

    private List<UserDeck>? userDecks;
    private UserDeck? selectedDeck;
    private bool isLoading = true;
    private string errorMessage = "";

    protected override async Task OnParametersSetAsync()
    {
        if (IsVisible && userDecks == null)
        {
            await LoadUserDecks();
        }
    }

    private async Task LoadUserDecks()
    {
        try
        {
            isLoading = true;
            errorMessage = "";
            userDecks = await DeckService.GetUserDecksAsync();
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to load decks: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void SelectDeck(UserDeck deck)
    {
        selectedDeck = deck;
        StateHasChanged();
    }

    private async Task ConfirmSelection()
    {
        if (selectedDeck != null)
        {
            await OnDeckSelected.InvokeAsync(selectedDeck);
            await Close();
        }
    }

    private async Task Close()
    {
        IsVisible = false;
        selectedDeck = null;
        await IsVisibleChanged.InvokeAsync(false);
    }

    private async Task NavigateToDeckBuilder()
    {
        await JSRuntime.InvokeVoidAsync("open", "/deck-builder", "_blank");
    }
}
