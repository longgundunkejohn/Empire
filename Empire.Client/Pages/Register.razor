@page "/register"
@using Empire.Client.Services
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <h2>Empire TCG</h2>
            <p>Create your account</p>
        </div>

        <div class="register-form">
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success">
                    @successMessage
                </div>
            }

            <div class="form-group">
                <label for="username">Username</label>
                <input type="text" id="username" class="form-control" @bind="username" @onkeypress="HandleKeyPress" placeholder="Choose a username" />
                <small class="form-text">Must be at least 3 characters long</small>
            </div>

            <div class="form-group">
                <label for="password">Password</label>
                <input type="password" id="password" class="form-control" @bind="password" @onkeypress="HandleKeyPress" placeholder="Choose a password" />
                <small class="form-text">Must be at least 6 characters long</small>
            </div>

            <div class="form-group">
                <label for="confirmPassword">Confirm Password</label>
                <input type="password" id="confirmPassword" class="form-control" @bind="confirmPassword" @onkeypress="HandleKeyPress" placeholder="Confirm your password" />
            </div>

            <div class="form-actions">
                <button class="btn btn-primary btn-register" @onclick="HandleRegister" disabled="@isLoading">
                    @if (isLoading)
                    {
                        <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                        <span>Creating account...</span>
                    }
                    else
                    {
                        <span>Create Account</span>
                    }
                </button>
            </div>

            <div class="register-footer">
                <p>Already have an account? <a href="/login" class="login-link">Sign in here</a></p>
            </div>
        </div>
    </div>
</div>

<style>
    .register-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
        padding: 20px;
    }

    .register-card {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
        padding: 40px;
        width: 100%;
        max-width: 400px;
        backdrop-filter: blur(10px);
    }

    .register-header {
        text-align: center;
        margin-bottom: 30px;
    }

    .register-header h2 {
        color: #1a1a2e;
        font-size: 2rem;
        font-weight: bold;
        margin-bottom: 8px;
    }

    .register-header p {
        color: #666;
        font-size: 1rem;
        margin: 0;
    }

    .form-group {
        margin-bottom: 20px;
    }

    .form-group label {
        display: block;
        margin-bottom: 8px;
        color: #333;
        font-weight: 500;
    }

    .form-control {
        width: 100%;
        padding: 12px 16px;
        border: 2px solid #e1e5e9;
        border-radius: 8px;
        font-size: 1rem;
        transition: border-color 0.3s ease;
        box-sizing: border-box;
    }

    .form-control:focus {
        outline: none;
        border-color: #28a745;
        box-shadow: 0 0 0 3px rgba(40, 167, 69, 0.1);
    }

    .form-text {
        display: block;
        margin-top: 4px;
        color: #666;
        font-size: 0.85rem;
    }

    .form-actions {
        margin: 30px 0 20px 0;
    }

    .btn-register {
        width: 100%;
        padding: 12px;
        font-size: 1rem;
        font-weight: 600;
        border-radius: 8px;
        border: none;
        background: linear-gradient(135deg, #28a745 0%, #1e7e34 100%);
        color: white;
        cursor: pointer;
        transition: all 0.3s ease;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .btn-register:hover:not(:disabled) {
        background: linear-gradient(135deg, #1e7e34 0%, #155724 100%);
        transform: translateY(-1px);
        box-shadow: 0 4px 12px rgba(40, 167, 69, 0.3);
    }

    .btn-register:disabled {
        opacity: 0.7;
        cursor: not-allowed;
        transform: none;
    }

    .register-footer {
        text-align: center;
        padding-top: 20px;
        border-top: 1px solid #e1e5e9;
    }

    .register-footer p {
        color: #666;
        margin: 0;
    }

    .login-link {
        color: #007bff;
        text-decoration: none;
        font-weight: 500;
    }

    .login-link:hover {
        text-decoration: underline;
    }

    .alert {
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 20px;
        font-size: 0.9rem;
    }

    .alert-danger {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        color: #721c24;
    }

    .alert-success {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        color: #155724;
    }

    .spinner-border-sm {
        width: 1rem;
        height: 1rem;
        border-width: 0.1em;
    }

    .spinner-border {
        display: inline-block;
        border: 0.25em solid currentColor;
        border-right-color: transparent;
        border-radius: 50%;
        animation: spinner-border 0.75s linear infinite;
    }

    @@keyframes spinner-border {
        to {
            transform: rotate(360deg);
        }
    }
</style>

@code {
    private string username = "";
    private string password = "";
    private string confirmPassword = "";
    private string errorMessage = "";
    private string successMessage = "";
    private bool isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        // Check if user is already authenticated
        if (await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/lobby");
        }
    }

    private async Task HandleRegister()
    {
        // Client-side validation
        if (string.IsNullOrWhiteSpace(username))
        {
            errorMessage = "Username is required.";
            return;
        }

        if (username.Length < 3)
        {
            errorMessage = "Username must be at least 3 characters long.";
            return;
        }

        if (string.IsNullOrWhiteSpace(password))
        {
            errorMessage = "Password is required.";
            return;
        }

        if (password.Length < 6)
        {
            errorMessage = "Password must be at least 6 characters long.";
            return;
        }

        if (password != confirmPassword)
        {
            errorMessage = "Passwords do not match.";
            return;
        }

        isLoading = true;
        errorMessage = "";
        successMessage = "";

        try
        {
            var result = await AuthService.RegisterAsync(username, password, confirmPassword);

            if (result.Success)
            {
                successMessage = result.Message;
                await Task.Delay(1000); // Brief delay to show success message
                Navigation.NavigateTo("/lobby");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = "An unexpected error occurred. Please try again.";
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter" && !isLoading)
        {
            await HandleRegister();
        }
    }
}
