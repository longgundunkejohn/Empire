@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Empire.Shared.DTOs
@using Empire.Shared.Models

<h3>Game Lobby</h3>

<!-- ─────── CREATE GAME SECTION ─────── -->
<h5>Create Game</h5>
<input placeholder="Your Name" @bind="createPlayerName" />
<select @bind="selectedDeckId">
    <option value="">-- Select Deck --</option>
    @foreach (var deck in uploadedDecks)
    {
        <option value="@deck.Id.ToString()">@deck.PlayerName - @deck.DeckName</option>
    }
</select>
<button @onclick="CreateGame">Create Game</button>

<hr />

<!-- ─────── UPLOAD DECK ─────── -->
<InputFile OnChange="OnUploadChange" accept=".csv" />
<input placeholder="Deck Name" @bind="uploadName" />
<input placeholder="Your Name" @bind="uploadOwner" />
<button @onclick="UploadDeck">Upload New Deck</button>

<hr />

<!-- ─────── OPEN GAMES LIST ─────── -->
<h5>Open Games</h5>
@if (games == null)
{
    <p>Loading games...</p>
}
else if (!games.Any())
{
    <p>No open games yet.</p>
}
else
{
    <ul>
        @foreach (var g in games)
        {
            <li>
                <b>@g.HostPlayer</b> – Game ID: @g.GameId
                <button @onclick="() => JoinGame(g.GameId)">Join</button>
            </li>
        }
    </ul>
}

<!-- ─────── DRAW DECKS SECTION ─────── -->
@if (!string.IsNullOrWhiteSpace(gameId) && !string.IsNullOrWhiteSpace(playerId) && gameState != null)
{
    <section class="draw-decks">
        <CardBackImage DeckCount="@CivicDeckCount" BackType="civic" OnDraw="DrawCivic" />
        <CardBackImage DeckCount="@MilitaryDeckCount" BackType="military" OnDraw="DrawMilitary" />
    </section>
}

@code {
    private List<GamePreview>? games;
    private List<PlayerDeck> uploadedDecks = new();
    private string createPlayerName = "";
    private string selectedDeckId = "";

    private IBrowserFile? deckFile;
    private string uploadName = "";
    private string uploadOwner = "";

    private GameState? gameState;
    private string gameId = "";
    private string playerId = "";

    private int CivicDeckCount => gameState?.PlayerDecks
        .GetValueOrDefault(playerId)?
        .Count(c => c.Type?.ToLowerInvariant() is "settlement" or "villager") ?? 0;

    private int MilitaryDeckCount => gameState?.PlayerDecks
        .GetValueOrDefault(playerId)?
        .Count(c => c.Type?.ToLowerInvariant() is not ("settlement" or "villager")) ?? 0;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            games = await GameApi.GetOpenGames();
            uploadedDecks = await GameApi.GetUploadedDecks();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load lobby data: {ex.Message}");
        }
    }

    private async Task OnUploadChange(InputFileChangeEventArgs e)
    {
        deckFile = e.File;
    }

    private async Task UploadDeck()
    {
        if (string.IsNullOrWhiteSpace(uploadOwner) || string.IsNullOrWhiteSpace(uploadName) || deckFile == null)
            return;

        using var content = new MultipartFormDataContent();
        var stream = deckFile.OpenReadStream(1024 * 1024);
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");

        content.Add(fileContent, "file", deckFile.Name);
        content.Add(new StringContent(uploadOwner), "playerName");
        content.Add(new StringContent(uploadName), "deckName");

        var response = await Http.PostAsync($"api/prelobby/upload?playerName={uploadOwner}&deckName={uploadName}", content);
        if (response.IsSuccessStatusCode)
        {
            uploadedDecks = await GameApi.GetUploadedDecks();
            uploadName = "";
            uploadOwner = "";
            deckFile = null;
            Console.WriteLine("✅ Deck uploaded.");
        }
        else
        {
            Console.WriteLine("❌ Deck upload failed.");
        }
    }

    private async Task CreateGame()
    {
        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckId))
        {
            Console.WriteLine("❌ Missing player name or selected deck.");
            return;
        }

        var gameStart = new GameStartRequest
            {
                Player1 = createPlayerName,
                DeckId = selectedDeckId
            };

        var response = await Http.PostAsJsonAsync("api/game/create", gameStart);

        if (response.IsSuccessStatusCode)
        {
            gameId = await response.Content.ReadAsStringAsync();
            playerId = createPlayerName;
            await RefreshGameState();
            Nav.NavigateTo($"/game/{gameId}/{playerId}");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"❌ Game creation failed: {error}");
        }
    }

    private async Task JoinGame(string id)
    {
        if (string.IsNullOrWhiteSpace(createPlayerName))
        {
            Console.WriteLine("❌ Missing player name.");
            return;
        }

        var selectedDeck = uploadedDecks.FirstOrDefault(d => d.Id.ToString() == selectedDeckId);
        if (selectedDeck == null)
        {
            Console.WriteLine("❌ No deck selected for joining.");
            return;
        }

        var success = await GameApi.JoinGame(id, createPlayerName, selectedDeck.CivicDeck, selectedDeck.MilitaryDeck);

        if (success)
        {
            gameId = id;
            playerId = createPlayerName;
            await RefreshGameState();
            Nav.NavigateTo($"/game/{gameId}/{playerId}");
        }
        else
        {
            Console.WriteLine("❌ Failed to join game.");
        }
    }

    private async Task RefreshGameState()
    {
        if (!string.IsNullOrWhiteSpace(gameId))
        {
            gameState = await GameApi.GetGameState(gameId);
        }
    }

    private async Task DrawCivic()
    {
        await GameApi.DrawCard(gameId, playerId, "civic");
        await RefreshGameState();
    }

    private async Task DrawMilitary()
    {
        await GameApi.DrawCard(gameId, playerId, "military");
        await RefreshGameState();
    }
}
