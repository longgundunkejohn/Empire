@page "/lobby"
@using Empire.Client.Services
@using Empire.Shared.Models
@inject AuthService AuthService
@inject NavigationManager Navigation
@inject LobbyService LobbyService
@inject IJSRuntime JSRuntime

<PageTitle>Empire TCG - Lobby</PageTitle>

<div class="lobby-container">
    @if (!isAuthenticated)
    {
        <div class="authentication-required">
            <h3>Authentication Required</h3>
            <p>Please log in to access the lobby.</p>
            <button class="btn btn-primary" @onclick="NavigateToLogin">Go to Login</button>
        </div>
    }
    else
    {
        <div class="lobby-header">
            <h1>⚔️ Empire TCG Lobby ⚔️</h1>
            <div class="user-info">
                <span>Welcome, @currentUsername!</span>
                <button class="btn btn-outline-light" @onclick="Logout">Logout</button>
            </div>
        </div>

        <div class="lobby-content">
            <!-- Left Panel: Game Lobbies -->
            <div class="lobby-panel">
                <div class="panel-header">
                    <h3>Game Lobbies</h3>
                    <button class="btn btn-success" @onclick="CreateLobby">Create Game</button>
                </div>
                
                <div class="lobby-list">
                    @if (gameLobbies.Any())
                    {
                        @foreach (var lobby in gameLobbies)
                        {
                            <div class="lobby-item @(lobby.Status == LobbyStatus.InProgress ? "in-progress" : "")">
                                <div class="lobby-info">
                                    <h4>@lobby.Name</h4>
                                    <div class="lobby-details">
                                        <span class="host">Host: @lobby.HostUsername</span>
                                        <span class="players">Players: @lobby.PlayerCount/2</span>
                                        <span class="status @lobby.Status.ToString().ToLower()">@lobby.Status</span>
                                    </div>
                                </div>
                                <div class="lobby-actions">
                                    @if (lobby.CanJoin && lobby.Status == LobbyStatus.WaitingForPlayers)
                                    {
                                        <button class="btn btn-primary btn-sm" @onclick="() => JoinLobby(lobby.Id)">Join</button>
                                    }
                                    @if (lobby.AllowSpectators && lobby.Status == LobbyStatus.InProgress)
                                    {
                                        <button class="btn btn-secondary btn-sm" @onclick="() => SpectateGame(lobby.Id)">Spectate</button>
                                    }
                                </div>
                            </div>
                        }
                    }
                    else
                    {
                        <div class="no-lobbies">
                            <p>No active game lobbies</p>
                            <small>Create a new game to get started!</small>
                        </div>
                    }
                </div>
            </div>

            <!-- Center Panel: Chat -->
            <div class="chat-panel">
                <div class="panel-header">
                    <h3>Lobby Chat</h3>
                    <button class="btn btn-sm btn-outline-secondary" @onclick="ClearChat">Clear</button>
                </div>
                
                <div class="chat-log" @ref="chatLogElement">
                    @foreach (var message in chatMessages.TakeLast(100))
                    {
                        <div class="chat-message @GetMessageClass(message)">
                            <span class="timestamp">@message.Timestamp.ToString("HH:mm")</span>
                            <span class="username">@message.Username:</span>
                            <span class="content">@message.Content</span>
                        </div>
                    }
                </div>
                
                <div class="chat-input">
                    <input type="text" @bind="chatInput" @onkeypress="OnChatKeyPress" 
                           placeholder="Type a message..." class="form-control" />
                    <button class="btn btn-primary" @onclick="SendChatMessage" disabled="@string.IsNullOrWhiteSpace(chatInput)">
                        Send
                    </button>
                </div>
            </div>

            <!-- Right Panel: Online Players -->
            <div class="players-panel">
                <div class="panel-header">
                    <h3>Online Players</h3>
                    <span class="online-count">@onlinePlayers.Count online</span>
                </div>
                
                <div class="players-list">
                    @foreach (var player in onlinePlayers.OrderBy(p => p.Username))
                    {
                        <div class="player-item @GetPlayerStatusClass(player)">
                            <div class="player-avatar">
                                @GetPlayerInitials(player.Username)
                            </div>
                            <div class="player-info">
                                <div class="player-name">@player.Username</div>
                                <div class="player-status">@player.Status</div>
                            </div>
                            @if (player.Username != currentUsername)
                            {
                                <div class="player-actions">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="() => ChallengePlayer(player.Username)">
                                        Challenge
                                    </button>
                                </div>
                            }
                        </div>
                    }
                </div>
            </div>
        </div>

        <!-- Quick Actions -->
        <div class="quick-actions">
            <button class="btn btn-outline-warning" @onclick="NavigateToDeckBuilder">
                <i class="fas fa-cards-blank"></i> Deck Builder
            </button>
            <button class="btn btn-outline-info" @onclick="NavigateToManualGame">
                <i class="fas fa-gamepad"></i> Manual Game
            </button>
            <button class="btn btn-outline-success" @onclick="RefreshLobbies">
                <i class="fas fa-sync"></i> Refresh
            </button>
        </div>
    }
</div>

@code {
    private bool isAuthenticated = false;
    private string currentUsername = "";
    private List<LobbyListItem> gameLobbies = new();
    private List<OnlinePlayer> onlinePlayers = new();
    private List<ChatMessage> chatMessages = new();
    private string chatInput = "";
    private ElementReference chatLogElement;

    protected override async Task OnInitializedAsync()
    {
        isAuthenticated = await AuthService.IsAuthenticatedAsync();
        
        if (!isAuthenticated)
        {
            return;
        }

        currentUsername = await AuthService.GetCurrentUsernameAsync() ?? "Unknown";
        
        // Load initial data
        await RefreshLobbies();
        await LoadOnlinePlayers();
        await LoadChatHistory();
        
        // Set up real-time updates (would use SignalR)
        await StartRealTimeUpdates();
    }

    private async Task RefreshLobbies()
    {
        try
        {
            gameLobbies = await LobbyService.GetLobbyListAsync();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading lobbies: {ex.Message}");
        }
    }

    private async Task LoadOnlinePlayers()
    {
        try
        {
            // This would come from a real service
            onlinePlayers = new List<OnlinePlayer>
            {
                new() { Username = currentUsername, Status = "In Lobby", IsOnline = true },
                new() { Username = "PlayerBot", Status = "Available", IsOnline = true },
                new() { Username = "EmpireVet", Status = "In Game", IsOnline = true },
                new() { Username = "Strategist", Status = "Available", IsOnline = true }
            };
            StateHasChanged();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading online players: {ex.Message}");
        }
    }

    private async Task LoadChatHistory()
    {
        try
        {
            // This would load recent chat messages from the server
            chatMessages.Add(new ChatMessage 
            { 
                Username = "System", 
                Content = "Welcome to the Empire TCG lobby!", 
                Timestamp = DateTime.Now.AddMinutes(-5),
                Type = MessageType.System
            });
            
            StateHasChanged();
            await ScrollChatToBottom();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error loading chat: {ex.Message}");
        }
    }

    private async Task StartRealTimeUpdates()
    {
        // This would set up SignalR connections for real-time updates
        // For now, we'll simulate with periodic updates
        _ = Task.Run(async () =>
        {
            while (isAuthenticated)
            {
                await Task.Delay(30000); // Update every 30 seconds
                await InvokeAsync(async () =>
                {
                    await RefreshLobbies();
                    await LoadOnlinePlayers();
                });
            }
        });
    }

    private async Task CreateLobby()
    {
        var lobbyName = await JSRuntime.InvokeAsync<string>("prompt", "Enter lobby name:");
        if (!string.IsNullOrWhiteSpace(lobbyName))
        {
            try
            {
                var request = new CreateLobbyRequest { Name = lobbyName };
                var lobby = await LobbyService.CreateLobbyAsync(request);
                
                if (lobby != null)
                {
                    Navigation.NavigateTo($"/lobby/{lobby.Id}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error creating lobby: {ex.Message}");
            }
        }
    }

    private async Task JoinLobby(string lobbyId)
    {
        try
        {
            var success = await LobbyService.JoinLobbyAsync(lobbyId);
            if (success)
            {
                Navigation.NavigateTo($"/lobby/{lobbyId}");
            }
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("alert", $"Error joining lobby: {ex.Message}");
        }
    }

    private async Task SpectateGame(string lobbyId)
    {
        Navigation.NavigateTo($"/game/{lobbyId}/spectator");
    }

    private async Task ChallengePlayer(string playerName)
    {
        var confirm = await JSRuntime.InvokeAsync<bool>("confirm", $"Challenge {playerName} to a game?");
        if (confirm)
        {
            // Create a private lobby and invite the player
            try
            {
                var request = new CreateLobbyRequest { Name = $"{currentUsername} vs {playerName}" };
                var lobby = await LobbyService.CreateLobbyAsync(request);
                
                if (lobby != null)
                {
                    // Send challenge notification (would use SignalR)
                    var message = new ChatMessage
                    {
                        Username = "System",
                        Content = $"🎯 {currentUsername} challenged {playerName} to a game! Lobby: {lobby.Name}",
                        Timestamp = DateTime.Now,
                        Type = MessageType.Challenge
                    };
                    chatMessages.Add(message);
                    StateHasChanged();
                    
                    Navigation.NavigateTo($"/lobby/{lobby.Id}");
                }
            }
            catch (Exception ex)
            {
                await JSRuntime.InvokeVoidAsync("alert", $"Error creating challenge: {ex.Message}");
            }
        }
    }

    private async Task SendChatMessage()
    {
        if (string.IsNullOrWhiteSpace(chatInput)) return;

        try
        {
            var message = new ChatMessage
            {
                Username = currentUsername,
                Content = chatInput.Trim(),
                Timestamp = DateTime.Now,
                Type = MessageType.User
            };

            // Add to local chat (in real app, would send via SignalR)
            chatMessages.Add(message);
            chatInput = "";
            
            StateHasChanged();
            await ScrollChatToBottom();
        }
        catch (Exception ex)
        {
            await JSRuntime.InvokeVoidAsync("console.error", $"Error sending chat: {ex.Message}");
        }
    }

    private async Task OnChatKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SendChatMessage();
        }
    }

    private async Task ClearChat()
    {
        chatMessages.Clear();
        StateHasChanged();
    }

    private async Task ScrollChatToBottom()
    {
        await JSRuntime.InvokeVoidAsync("scrollToBottom", chatLogElement);
    }

    private string GetMessageClass(ChatMessage message)
    {
        return message.Type switch
        {
            MessageType.System => "system",
            MessageType.User => "user",
            MessageType.Challenge => "challenge",
            _ => "user"
        };
    }

    private string GetPlayerStatusClass(OnlinePlayer player)
    {
        return player.Status.ToLower() switch
        {
            "available" => "available",
            "in game" => "in-game",
            "in lobby" => "in-lobby",
            _ => "unknown"
        };
    }

    private string GetPlayerInitials(string username)
    {
        return username.Length > 1 ? username.Substring(0, 2).ToUpper() : username.ToUpper();
    }

    private async Task NavigateToLogin()
    {
        Navigation.NavigateTo("/login");
    }

    private async Task NavigateToDeckBuilder()
    {
        Navigation.NavigateTo("/deckbuilder");
    }

    private async Task NavigateToManualGame()
    {
        Navigation.NavigateTo("/game-manual/demo/player1");
    }

    private async Task Logout()
    {
        await AuthService.LogoutAsync();
        Navigation.NavigateTo("/");
    }

    // Models for lobby chat and online players
    public class ChatMessage
    {
        public string Username { get; set; } = "";
        public string Content { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public MessageType Type { get; set; } = MessageType.User;
    }

    public class OnlinePlayer
    {
        public string Username { get; set; } = "";
        public string Status { get; set; } = "";
        public bool IsOnline { get; set; }
        public DateTime LastSeen { get; set; } = DateTime.Now;
    }

    public enum MessageType
    {
        User,
        System,
        Challenge
    }
}
