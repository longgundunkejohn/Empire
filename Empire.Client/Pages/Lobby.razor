@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Empire.Shared.DTOs

<h3>Game Lobby</h3>

<!-- ─────── CREATE GAME SECTION ─────── -->
<h5>Create Game</h5>
<input placeholder="Your Name" @bind="createPlayerName" />
<select @bind="selectedDeckOwner">
    <option value="">-- Select Deck Owner --</option>
    @foreach (var name in uploadedDeckOwners)
    {
        <option value="@name">@name</option>
    }
</select>
<button @onclick="CreateGame">Create Game</button>

<hr />

<!-- ─────── UPLOAD DECK ─────── -->
<InputFile OnChange="OnUploadChange" accept=".csv" />
<input placeholder="New Deck Name" @bind="uploadName" />
<button @onclick="UploadDeck">Upload New Deck</button>

<hr />

<!-- ─────── OPEN GAMES LIST ─────── -->
<h5>Open Games</h5>
@if (games == null)
{
    <p>Loading games...</p>
}
else if (!games.Any())
{
    <p>No open games yet.</p>
}
else
{
    <ul>
        @foreach (var g in games)
        {
            <li>
                <b>@g.HostPlayer</b> – Game ID: @g.GameId
            </li>
        }
    </ul>
}

@code {
    private List<GamePreview>? games;
    private List<string> uploadedDeckOwners = new();
    private string createPlayerName = "";
    private string selectedDeckOwner = "";

    private IBrowserFile? deckFile;
    private string uploadName = "";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            games = await GameApi.GetOpenGames();
            uploadedDeckOwners = await GameApi.GetUploadedDeckNames();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Failed to load lobby data: {ex.Message}");
        }
    }

    private async Task OnUploadChange(InputFileChangeEventArgs e)
    {
        deckFile = e.File;
    }

    private async Task UploadDeck()
    {
        if (string.IsNullOrWhiteSpace(uploadName) || deckFile == null)
            return;

        using var content = new MultipartFormDataContent();
        var stream = deckFile.OpenReadStream(1024 * 1024);
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");

        content.Add(fileContent, "file", deckFile.Name); // ✅ must match the controller param
        content.Add(new StringContent(uploadName), "playerName");

        var response = await Http.PostAsync("api/prelobby/upload?playerName=" + uploadName, content);
        if (response.IsSuccessStatusCode)
        {
            if (response.IsSuccessStatusCode)
            {
                uploadedDeckOwners = await GameApi.GetUploadedDeckNames(); // 🔁 refresh list
                uploadName = "";
                deckFile = null;
                Console.WriteLine("✅ Deck uploaded.");
            }

        }
        else
        {
            Console.WriteLine("❌ Deck upload failed.");
        }
    }

    private async Task CreateGame()
    {
        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckOwner))
        {
            Console.WriteLine("❌ Missing player name or selected deck.");
            return;
        }

        var gameStart = new GameStartRequest
            {
                Player1 = createPlayerName,
                DeckOwner = selectedDeckOwner
            };

        var response = await Http.PostAsJsonAsync("api/game/create", gameStart);

        if (response.IsSuccessStatusCode)
        {
            var gameId = await response.Content.ReadAsStringAsync();
            Nav.NavigateTo($"/game/{gameId}/{createPlayerName}");
        }
        else
        {
            var error = await response.Content.ReadAsStringAsync();
            Console.WriteLine($"❌ Game creation failed: {error}");
        }
    }
}
