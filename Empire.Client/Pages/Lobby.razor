@page "/lobby"
@using Empire.Shared.Models
@using Empire.Client.Services
@using Empire.Client.Components
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthService AuthService

<PageTitle>Game Lobby</PageTitle>

<div class="lobby-container">
    <div class="lobby-header">
        <h2>Empire TCG - Multiplayer Lobby</h2>
        <div class="user-info">
            <i class="fas fa-user"></i>
            Welcome, @currentUsername
        </div>
    </div>

    <div class="lobby-content">
        @if (showCreateModal)
        {
            <CreateGameModal OnGameCreated="OnGameCreated" OnCancel="HideCreateModal" />
        }

        <LobbyBrowser OnJoinLobby="OnJoinLobby" OnCreateGame="ShowCreateModal" />

        @if (!string.IsNullOrEmpty(errorMessage))
        {
            <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
                @errorMessage
                <button type="button" class="btn-close" @onclick="ClearError"></button>
            </div>
        }

        @if (!string.IsNullOrEmpty(successMessage))
        {
            <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
                @successMessage
                <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
            </div>
        }
    </div>
</div>

<style>
    .lobby-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
        padding: 20px;
    }

    .lobby-header {
        text-align: center;
        color: white;
        margin-bottom: 30px;
        padding: 20px;
    }

    .lobby-header h2 {
        font-size: 2.5rem;
        margin-bottom: 10px;
        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
    }

    .user-info {
        font-size: 1.1rem;
        opacity: 0.9;
        display: flex;
        align-items: center;
        justify-content: center;
        gap: 8px;
    }

    .lobby-content {
        max-width: 1200px;
        margin: 0 auto;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 20px 40px rgba(0, 0, 0, 0.3);
    }

    .alert {
        border-radius: 8px;
        border: none;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .alert-danger {
        background-color: #f8d7da;
        color: #721c24;
    }

    .alert-success {
        background-color: #d4edda;
        color: #155724;
    }

    .btn-close {
        background: none;
        border: none;
        font-size: 1.2rem;
        opacity: 0.7;
        cursor: pointer;
    }

    .btn-close:hover {
        opacity: 1;
    }

    @@media (max-width: 768px) {
        .lobby-container {
            padding: 10px;
        }

        .lobby-header h2 {
            font-size: 2rem;
        }

        .lobby-content {
            padding: 20px;
        }
    }
</style>

@code {
    private bool showCreateModal = false;
    private string errorMessage = "";
    private string successMessage = "";
    private string currentUsername = "Player";

    protected override async Task OnInitializedAsync()
    {
        // Check if user is authenticated
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Load current username
        currentUsername = await GetCurrentUsername();
    }

    private async Task ShowCreateModal()
    {
        showCreateModal = true;
    }

    private async Task HideCreateModal()
    {
        showCreateModal = false;
    }

    private async Task OnGameCreated(string lobbyId)
    {
        showCreateModal = false;
        successMessage = "Game created successfully!";
        
        // Navigate to the specific lobby page
        Navigation.NavigateTo($"/lobby/{lobbyId}");
    }

    private async Task OnJoinLobby(string lobbyId)
    {
        try
        {
            // For now, just navigate to the lobby. In the future, this could handle deck selection
            Navigation.NavigateTo($"/lobby/{lobbyId}");
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to join lobby: {ex.Message}";
        }
    }

    private void ClearError()
    {
        errorMessage = "";
    }

    private void ClearSuccess()
    {
        successMessage = "";
    }

    private async Task<string> GetCurrentUsername()
    {
        var user = await AuthService.GetCurrentUserAsync();
        return user?.Username ?? "Player";
    }
}
