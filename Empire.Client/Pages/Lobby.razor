@page "/lobby"

@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms
@using Empire.Shared.Models.DTOs
<h2>Available Games</h2>

<!-- 👤 New Game Section -->
<h4>Create New Game</h4>
<input placeholder="Your Name" @bind="createName" />
<InputFile OnChange="OnCreateDeckUpload" accept=".csv" />
<button @onclick="CreateGame">Create Game</button>

<hr />

@if (games == null)
{
    <p>Loading...</p>
}
else if (games.Count == 0)
{
    <p>No open games yet.</p>
}
else
{
    <ul>
        @foreach (var g in games)
        {
            <li>
                <strong>@g.HostPlayer</strong> – Game ID: @g.GameId

                @if (g.IsJoinable)
                {
                    @if (selectedGameId == g.GameId)
                    {
                        <input placeholder="Your Name" @bind="joinName" />
                        <InputFile OnChange="OnDeckUpload" accept=".csv" />
                        <button @onclick="() => Join(g.GameId)">Upload & Join</button>
                        <button @onclick="CancelJoin">Cancel</button>
                    }
                    else
                    {
                        <button @onclick="() => SelectGame(g.GameId)">Join</button>
                    }
                }
                else
                {
                    <em>Full</em>
                }
            </li>
        }
    </ul>
}

@code {
    private List<GamePreview>? games;

    private string selectedGameId = "";
    private string joinName = "";
    private IBrowserFile? uploadedDeck;

    private string createName = "";
    private IBrowserFile? createDeck;

    protected override async Task OnInitializedAsync()
    {
        games = await GameApi.GetOpenGames();
    }

    private void SelectGame(string gameId)
    {
        selectedGameId = gameId;
        joinName = "";
        uploadedDeck = null;
    }

    private void CancelJoin()
    {
        selectedGameId = "";
        joinName = "";
        uploadedDeck = null;
    }

    private async Task OnDeckUpload(InputFileChangeEventArgs e)
    {
        uploadedDeck = e.File;
    }

    private async Task OnCreateDeckUpload(InputFileChangeEventArgs e)
    {
        createDeck = e.File;
    }

    private async Task Join(string gameId)
    {
        if (string.IsNullOrWhiteSpace(joinName) || uploadedDeck is null)
            return;

        using var content = new MultipartFormDataContent();
        var stream = uploadedDeck.OpenReadStream(1024 * 1024);
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");

        content.Add(fileContent, "deckCsv", uploadedDeck.Name);
        content.Add(new StringContent(joinName), "playerName");

        var response = await Http.PostAsync($"api/game/uploadDeck/{gameId}", content);
        if (response.IsSuccessStatusCode)
        {
            Nav.NavigateTo($"/game/{gameId}/{joinName}");
        }
    }

    private async Task CreateGame()
{
    if (string.IsNullOrWhiteSpace(createName) || createDeck is null)
    {
        Console.WriteLine("Missing name or deck.");
        return;
    }

    // ✅ Step 1: Create game with JSON
    var gameStart = new GameStartRequest { Player1 = createName };
    var createResponse = await Http.PostAsJsonAsync("api/game/create", gameStart);

    if (!createResponse.IsSuccessStatusCode)
    {
        var error = await createResponse.Content.ReadAsStringAsync();
        Console.WriteLine($"Game creation failed: {error}");
        return;
    }

    var gameId = await createResponse.Content.ReadAsStringAsync();

    // ✅ Step 2: Upload deck
    using var content = new MultipartFormDataContent();
    var stream = createDeck.OpenReadStream(1024 * 1024);
    var fileContent = new StreamContent(stream);
    fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");

    content.Add(fileContent, "deckCsv", createDeck.Name);
    content.Add(new StringContent(createName), "playerName");

    var uploadResponse = await Http.PostAsync($"api/game/uploadDeck/{gameId}", content);
    if (!uploadResponse.IsSuccessStatusCode)
    {
        Console.WriteLine("Deck upload failed.");
        return;
    }

    // ✅ Step 3: Enter the game
    Nav.NavigateTo($"/game/{gameId}/{createName}");
}

}
}
