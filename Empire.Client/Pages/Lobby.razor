@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Empire.Client.Services
@using Empire.Shared.Models
@using Empire.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

<div class="container py-4">

    <h3>Empire Lobby</h3>

    <div class="mb-3">
        <label class="form-label">Your Name</label>
        <input type="text"
               class="form-control"
               placeholder="Enter your name"
               value="@_createPlayerName"
               @oninput="OnNameChanged" />

    </div>

    @if (deckList?.Any() == true)

    {
        <div class="mb-3">
            <label class="form-label">Select Deck</label>
            <select class="form-select" @bind="selectedDeckName">
                @foreach (var deck in deckList)

                {
                    <option value="@deck.DeckName">@deck.DeckName</option>
                }
            </select>
        </div>
    }

    else if (!string.IsNullOrWhiteSpace(_createPlayerName))

    {
        <p><em>No decks found for @_createPlayerName</em></p>
    }

    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="CreateGame" disabled="@(!CanCreateGame)">Create Game</button>
    </div>

    <hr />

    <h4>Open Games</h4>
    @if (games?.Any() == true)

    {
        <ul class="list-group">
            @foreach (var game in games)

            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@game.GameId</strong> hosted by <em>@game.HostPlayer</em>
                    </div>
                    <button class="btn btn-success btn-sm" @onclick="() => JoinGame(game.GameId)">Join</button>
                </li>
            }
        </ul>
    }

    else

    {
        <p>No open games.</p>
    }

    <hr />

    <h4>Upload New Deck</h4>

    <div class="mb-3">
        <InputFile OnChange="HandleFileChange" accept=".csv" class="form-control" />
    </div>

    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Deck Name (optional)" @bind="uploadDeckName" />
    </div>

    <div class="mb-3">
        <button class="btn btn-secondary" @onclick="UploadDeck" disabled="@(!CanUploadDeck)">Upload Deck</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(uploadStatus))

    {
        <div class="alert alert-info">@uploadStatus</div>
    }

</div>

@code {
    private List<GamePreview> games = new();

    private List<PlayerDeck> deckList = new();



    private string selectedDeckName = "";

    private string gameId = "";

    private string playerId = "";

    private GameState? gameState;



    private IBrowserFile? selectedFile;

    private string uploadDeckName = "";

    private string uploadStatus = "";



    private string _createPlayerName = "";

    private string CreatePlayerName => _createPlayerName;



    private bool CanUploadDeck => selectedFile != null && !string.IsNullOrWhiteSpace(_createPlayerName);

    private bool CanCreateGame => !string.IsNullOrWhiteSpace(_createPlayerName) && !string.IsNullOrWhiteSpace(selectedDeckName);



    private async Task UploadDeck()
    {
        if (selectedFile == null || string.IsNullOrWhiteSpace(_createPlayerName))
        {
            uploadStatus = "❌ Please select a file and enter your name.";
            return;
        }

        uploadStatus = "⏳ Uploading deck...";
        StateHasChanged();

        try
        {
            var content = new MultipartFormDataContent();
            
            // Increase file size limit to 5MB
            var fileStream = selectedFile.OpenReadStream(5 * 1024 * 1024);
            var fileContent = new StreamContent(fileStream);
            fileContent.Headers.ContentType = new MediaTypeHeaderValue("text/csv");

            content.Add(fileContent, "file", selectedFile.Name);

            var query = $"?playerName={Uri.EscapeDataString(_createPlayerName)}";
            if (!string.IsNullOrWhiteSpace(uploadDeckName))
                query += $"&deckName={Uri.EscapeDataString(uploadDeckName)}";

            Console.WriteLine($"[Lobby] 📤 Uploading deck to: api/prelobby/upload{query}");
            Console.WriteLine($"[Lobby] 📁 File: {selectedFile.Name} ({selectedFile.Size} bytes)");

            var response = await Http.PostAsync($"api/prelobby/upload{query}", content);
            
            Console.WriteLine($"[Lobby] 📨 Response: {response.StatusCode}");

            if (response.IsSuccessStatusCode)
            {
                uploadStatus = "✅ Upload successful!";
                await LoadDecksForPlayer();
            }
            else
            {
                var errorContent = await response.Content.ReadAsStringAsync();
                Console.WriteLine($"[Lobby] ❌ Error content: {errorContent}");
                uploadStatus = $"❌ Upload failed: {response.ReasonPhrase} - {errorContent}";
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"[Lobby] ❌ Exception: {ex}");
            uploadStatus = $"❌ Upload failed: {ex.Message}";
        }
    }



    private void HandleFileChange(InputFileChangeEventArgs e)

    {

        selectedFile = e.File;

        uploadStatus = $"📂 Selected: {selectedFile.Name}";

    }



    private async Task LoadDecksForPlayer()

    {

        if (string.IsNullOrWhiteSpace(_createPlayerName))

        {

            deckList.Clear();

            return;

        }



        try

        {

            deckList = await GameApi.GetDecksForPlayer(_createPlayerName);

            selectedDeckName = deckList.FirstOrDefault()?.DeckName ?? "";

        }

        catch (Exception ex)

        {

            Console.WriteLine($"[Lobby] ❌ Failed to load decks for {_createPlayerName}: {ex.Message}");

        }

    }



    protected override async Task OnInitializedAsync()

    {

        games = await GameApi.GetOpenGames();

    }































    private async Task CreateGame()

    {

        var selectedDeck = deckList.FirstOrDefault(d => d.DeckName == selectedDeckName);

        if (selectedDeck == null) return;



        var id = await GameApi.CreateGame(_createPlayerName, selectedDeck.Id);

        if (string.IsNullOrWhiteSpace(id)) return;



        gameId = id;

        playerId = _createPlayerName;



        await RefreshGameState();

        Nav.NavigateTo($"/game/{gameId}/{playerId}");

    }





































    private async Task JoinGame(string id)

    {

        var deck = deckList.FirstOrDefault(d => d.DeckName == selectedDeckName);

        if (deck == null) return;



        var success = await GameApi.JoinGame(id, _createPlayerName, deck.CivicDeck, deck.MilitaryDeck);

        if (success)

        {

            gameId = id;

            playerId = _createPlayerName;

            await RefreshGameState();

            Nav.NavigateTo($"/game/{gameId}/{playerId}");

        }

        else

        {

            Console.WriteLine("❌ Failed to join game.");

        }

    }



    private async Task RefreshGameState()

    {

        gameState = await GameApi.GetGameState(gameId);

    }



    // 🧠 Watch name input & live update decks

    private async Task OnNameChanged(ChangeEventArgs e)

    {

        _createPlayerName = e.Value?.ToString()?.Trim() ?? "";

        await LoadDecksForPlayer();

    }

}
