@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Empire.Shared.Models
@using Empire.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

<div class="container py-4">

    <h3>Empire Lobby</h3>

    <div class="mb-3">
        <label class="form-label">Your Name</label>
        <input type="text"
               class="form-control"
               placeholder="Enter your name"
               @bind="createPlayerName" />
    </div>

    <div class="mb-3">
        <label class="form-label">Select Deck</label>
        <select class="form-select" @bind="selectedDeckName">
            @foreach (var deck in deckNames)
            {
                <option value="@deck">@deck</option>
            }
        </select>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="CreateGame">Create Game</button>
    </div>

    <hr />

    <h4>Open Games</h4>

    @if (games?.Any() == true)

    {
        <ul class="list-group">
            @foreach (var game in games)

            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@game.GameId</strong> hosted by <em>@game.HostPlayer</em>
                    </div>
                    <button class="btn btn-success btn-sm" @onclick="() => JoinGame(game.GameId)">Join</button>
                </li>
            }
        </ul>
    }

    else

    {
        <p>No open games.</p>
    }

    <hr />

    <h4>Upload New Deck</h4>

    <div class="mb-3">
        <InputFile OnChange="HandleFileChange" accept=".csv" class="form-control" />
    </div>

    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Deck Name (optional)" @bind="uploadDeckName" />
    </div>

    <div class="mb-3">
        <button class="btn btn-secondary" @onclick="UploadDeck" disabled="@(!CanUploadDeck)">Upload Deck</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(uploadStatus))

    {
        <div class="alert alert-info">@uploadStatus</div>
    }

</div>

@code {
    private List<GamePreview> games = new();

    private List<string> deckNames = new();



    private string selectedDeckName = "";

    private string gameId = "";

    private string playerId = "";

    private GameState? gameState;



    private IBrowserFile? selectedFile;

    private string uploadDeckName = "";

    private string uploadStatus = "";



    private string _createPlayerName = "";

    private string createPlayerName

    {

        get => _createPlayerName;

        set

        {

            _createPlayerName = value;

            StateHasChanged(); // 🔥 re-evaluate CanUploadDeck

        }

    }



    private bool CanUploadDeck => selectedFile != null && !string.IsNullOrWhiteSpace(createPlayerName);



    private void HandleFileChange(InputFileChangeEventArgs e)

    {

        selectedFile = e.File;

        uploadStatus = $"📂 Selected: {selectedFile.Name}";

        StateHasChanged(); // re-check upload eligibility

    }



    private async Task UploadDeck()

    {

        if (selectedFile == null || string.IsNullOrWhiteSpace(createPlayerName))

            return;



        try

        {

            var content = new MultipartFormDataContent();

            var fileStream = selectedFile.OpenReadStream(512000);

            var fileContent = new StreamContent(fileStream);



            fileContent.Headers.ContentType = new MediaTypeHeaderValue("text/csv");

            content.Add(fileContent, "file", selectedFile.Name);

            content.Add(new StringContent(createPlayerName), "playerName");



            if (!string.IsNullOrWhiteSpace(uploadDeckName))

                content.Add(new StringContent(uploadDeckName), "deckName");



            var query = $"?playerName={Uri.EscapeDataString(createPlayerName)}";

            if (!string.IsNullOrWhiteSpace(uploadDeckName))

                query += $"&deckName={Uri.EscapeDataString(uploadDeckName)}";



            var response = await Http.PostAsync($"api/prelobby/upload{query}", content);



            uploadStatus = response.IsSuccessStatusCode

                ? "✅ Upload successful!"

                : $"❌ Upload failed: {response.ReasonPhrase}";



            deckNames = await GameApi.GetUploadedDeckNames();

            selectedDeckName = deckNames.FirstOrDefault() ?? "";

        }

        catch (Exception ex)

        {

            uploadStatus = $"❌ Upload failed: {ex.Message}";

        }

    }



    protected override async Task OnInitializedAsync()

    {

        try

        {

            games = await GameApi.GetOpenGames();

            deckNames = await GameApi.GetUploadedDeckNames();

            selectedDeckName = deckNames.FirstOrDefault() ?? "";

        }

        catch (Exception ex)

        {

            Console.WriteLine($"[Lobby] ❌ Init error: {ex.Message}");

        }

    }



    private async Task CreateGame()

    {

        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckName))

            return;



        var id = await GameApi.CreateGame(createPlayerName, selectedDeckName);

        if (string.IsNullOrWhiteSpace(id)) return;



        gameId = id;

        playerId = createPlayerName;



        await RefreshGameState();

        Nav.NavigateTo($"/game/{gameId}/{playerId}");

    }



    private async Task JoinGame(string id)

    {

        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckName))

            return;



        var decks = await GameApi.GetDecksForPlayer(createPlayerName);

        var selected = decks.FirstOrDefault(d => d.DeckName == selectedDeckName);



        if (selected == null)

        {

            Console.WriteLine("❌ Deck not found.");

            return;

        }



        var success = await GameApi.JoinGame(id, createPlayerName, selected.CivicDeck, selected.MilitaryDeck);



        if (success)

        {

            gameId = id;

            playerId = createPlayerName;

            await RefreshGameState();

            Nav.NavigateTo($"/game/{gameId}/{playerId}");

        }

        else

        {

            Console.WriteLine("❌ Failed to join game.");

        }

    }



    private async Task RefreshGameState()

    {

        try

        {

            gameState = await GameApi.GetGameState(gameId);

        }

        catch (Exception ex)

        {

            Console.WriteLine($"❌ Error refreshing game state: {ex.Message}");

        }

    }
}
