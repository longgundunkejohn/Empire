@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Empire.Shared.Models
@using Empire.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms

<h3>Lobby</h3>

<div class="mb-3">
    <label>Your Name:</label>
    <input type="text" @bind="createPlayerName" class="form-control" />
</div>

<div class="mb-3">
    <label>Select Deck:</label>
    <select @bind="selectedDeckName" class="form-select">
        @foreach (var deck in deckNames)

        {
            <option value="@deck">@deck</option>
        }
    </select>
</div>

<button class="btn btn-primary" @onclick="CreateGame">Create Game</button>

<hr />

<h4>Open Games</h4>
@if (games?.Any() == true)

{
    <ul>
        @foreach (var game in games)

        {
            <li>
                <strong>@game.GameId</strong> hosted by <em>@game.HostPlayer</em>
                <button class="btn btn-success btn-sm" @onclick="() => JoinGame(game.GameId)">Join</button>
            </li>
        }
    </ul>
}

else

{
    <p>No open games.</p>
}

<hr />

<h4>Upload New Deck</h4>

<InputFile OnChange="HandleFileChange" accept=".csv" />
<input type="text" @bind="uploadDeckName" placeholder="Deck Name (optional)" class="form-control my-2" />
<button class="btn btn-secondary" @onclick="UploadDeck" disabled="@(!CanUploadDeck)">Upload Deck</button>

@if (!string.IsNullOrWhiteSpace(uploadStatus))

{
    <p>@uploadStatus</p>
}

@code {
    private List<GamePreview> games = new();

    private List<string> deckNames = new();

    private string selectedDeckName = "";

    private string createPlayerName = "";

    private string gameId = "";

    private string playerId = "";

    private GameState? gameState;



    private IBrowserFile? selectedFile;

    private string uploadDeckName = "";

    private string uploadStatus = "";



    private bool CanUploadDeck => selectedFile != null && !string.IsNullOrWhiteSpace(createPlayerName);



    private void HandleFileChange(InputFileChangeEventArgs e)

    {

        selectedFile = e.File;

        uploadStatus = $"📂 Selected: {selectedFile.Name}";

    }



    private async Task UploadDeck()

    {

        if (selectedFile == null || string.IsNullOrWhiteSpace(createPlayerName))

            return;



        try

        {

            var content = new MultipartFormDataContent();

            var fileStream = selectedFile.OpenReadStream(512000);

            content.Add(new StreamContent(fileStream), "file", selectedFile.Name);

            content.Add(new StringContent(createPlayerName), "playerName");



            if (!string.IsNullOrWhiteSpace(uploadDeckName))

                content.Add(new StringContent(uploadDeckName), "deckName");



            var response = await Http.PostAsync(

                $"api/prelobby/upload?playerName={createPlayerName}" +

                (string.IsNullOrWhiteSpace(uploadDeckName) ? "" : $"&deckName={uploadDeckName}"),

                content

            );



            uploadStatus = response.IsSuccessStatusCode

                ? "✅ Upload successful!"

                : $"❌ Upload failed: {response.ReasonPhrase}";



            // Refresh decks

            deckNames = await GameApi.GetUploadedDeckNames();

            selectedDeckName = deckNames.FirstOrDefault() ?? "";

        }

        catch (Exception ex)

        {

            uploadStatus = $"❌ Upload failed: {ex.Message}";

        }

    }



    protected override async Task OnInitializedAsync()

    {

        try

        {

            games = await GameApi.GetOpenGames();

            deckNames = await GameApi.GetUploadedDeckNames();

            selectedDeckName = deckNames.FirstOrDefault() ?? "";

        }

        catch (Exception ex)

        {

            Console.WriteLine($"[Lobby] ❌ Init error: {ex.Message}");

        }

    }



    private async Task CreateGame()

    {

        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckName))

            return;



        var id = await GameApi.CreateGame(createPlayerName, selectedDeckName);

        if (string.IsNullOrWhiteSpace(id)) return;



        gameId = id;

        playerId = createPlayerName;



        await RefreshGameState();

        Nav.NavigateTo($"/game/{gameId}/{playerId}");

    }



    private async Task JoinGame(string id)

    {

        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckName))

            return;



        var decks = await GameApi.GetUploadedDecks();

        var selected = decks.FirstOrDefault(d => d.DeckName == selectedDeckName);



        if (selected == null)

        {

            Console.WriteLine("❌ Deck not found.");

            return;

        }



        var success = await GameApi.JoinGame(id, createPlayerName, selected.CivicDeck, selected.MilitaryDeck);

        if (success)

        {

            gameId = id;

            playerId = createPlayerName;

            await RefreshGameState();

            Nav.NavigateTo($"/game/{gameId}/{playerId}");

        }

        else

        {

            Console.WriteLine("❌ Failed to join game.");

        }

    }



    private async Task RefreshGameState()

    {

        try

        {

            gameState = await GameApi.GetGameState(gameId);

        }

        catch (Exception ex)

        {

            Console.WriteLine($"❌ Error refreshing game state: {ex.Message}");

        }

    }
}
