// FIXED LOBBY.razor
@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Empire.Shared.Models
@using Empire.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms

<h3>Lobby</h3>

<input type="text" placeholder="Your Name" @bind="createPlayerName" />

<select @bind="selectedDeckName">
    @foreach (var deck in deckNames)

    {
        <option value="@deck">@deck</option>
    }
</select>

<button @onclick="CreateGame">Create Game</button>

<hr />

<h4>Open Games</h4>
@if (games?.Any() == true)

{
    <ul>
        @foreach (var game in games)

        {
            <li>
                @game.GameId
                <button @onclick="() => JoinGame(game.GameId)">Join</button>
            </li>
        }
    </ul>
}

else

{
    <p>No open games.</p>
}

@if (!string.IsNullOrWhiteSpace(gameId) && !string.IsNullOrWhiteSpace(playerId) && gameState is not null)

{
    <section class="draw-decks">
        <button @onclick="DrawCivic">Draw Civic</button>
        <button @onclick="DrawMilitary">Draw Military</button>
    </section>
}

<hr />
<h4>Upload New Deck</h4>

<InputFile OnChange="HandleFileChange" accept=".csv" />
<input type="text" @bind="uploadDeckName" placeholder="Deck Name (optional)" />
<button @onclick="UploadDeck" disabled="@(!CanUploadDeck)">Upload Deck</button>

@if (!string.IsNullOrEmpty(uploadStatus))

{
    <p>@uploadStatus</p>
}

@code {
    private List<GamePreview> games = new();

    private List<string> deckNames = new();

    private string selectedDeckName = "";

    private string createPlayerName = "";

    private string gameId = "";

    private string playerId = "";

    private GameState? gameState;



    private IBrowserFile? selectedFile;

    private string uploadDeckName = "";

    private string uploadStatus = "";



    private bool CanUploadDeck => selectedFile != null && !string.IsNullOrWhiteSpace(createPlayerName);



    private void HandleFileChange(InputFileChangeEventArgs e)

    {

        selectedFile = e.File;

        uploadStatus = $"📂 Selected: {selectedFile.Name}";

    }



    private async Task UploadDeck()

    {

        if (selectedFile == null || string.IsNullOrWhiteSpace(createPlayerName))

            return;



        try

        {

            var content = new MultipartFormDataContent();

            var fileContent = new StreamContent(selectedFile.OpenReadStream(512000));

            content.Add(fileContent, "file", selectedFile.Name);

            content.Add(new StringContent(createPlayerName), "playerName");



            if (!string.IsNullOrWhiteSpace(uploadDeckName))

                content.Add(new StringContent(uploadDeckName), "deckName");



            var response = await Http.PostAsync("api/prelobby/upload?playerName=" + createPlayerName +

                                                (string.IsNullOrWhiteSpace(uploadDeckName) ? "" : "&deckName=" + uploadDeckName),

                                                content);



            uploadStatus = response.IsSuccessStatusCode

                ? "✅ Upload successful!"

                : $"❌ Upload failed: {response.ReasonPhrase}";



            deckNames = await GameApi.GetUploadedDeckNames();

            selectedDeckName = deckNames.FirstOrDefault() ?? "";

        }

        catch (Exception ex)

        {

            uploadStatus = $"❌ Exception: {ex.Message}";

        }

    }



    protected override async Task OnInitializedAsync()

    {

        try

        {

            games = await GameApi.GetOpenGames();

            deckNames = await GameApi.GetUploadedDeckNames();

            selectedDeckName = deckNames.FirstOrDefault() ?? "";

        }

        catch (Exception ex)

        {

            Console.WriteLine($"[Lobby] ❌ Init error: {ex.Message}");

        }

    }



    private async Task CreateGame()

    {

        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckName))

            return;



        var id = await GameApi.CreateGame(createPlayerName, selectedDeckName);

        if (string.IsNullOrWhiteSpace(id)) return;



        gameId = id;

        playerId = createPlayerName;



        await RefreshGameState();

        Nav.NavigateTo($"/game/{gameId}/{playerId}");

    }



    private async Task JoinGame(string id)

    {

        if (string.IsNullOrWhiteSpace(createPlayerName) || string.IsNullOrWhiteSpace(selectedDeckName))

            return;



        var decks = await GameApi.GetUploadedDecks();

        var selected = decks.FirstOrDefault(d => d.DeckName == selectedDeckName);



        if (selected == null)

        {

            Console.WriteLine("❌ Deck not found.");

            return;

        }



        var success = await GameApi.JoinGame(id, createPlayerName, selected.CivicDeck, selected.MilitaryDeck);

        if (success)

        {

            gameId = id;

            playerId = createPlayerName;

            await RefreshGameState();

            Nav.NavigateTo($"/game/{gameId}/{playerId}");

        }

        else

        {

            Console.WriteLine("❌ Failed to join game.");

        }

    }



    private async Task RefreshGameState()

    {

        try

        {

            gameState = await GameApi.GetGameState(gameId);

        }

        catch (Exception ex)

        {

            Console.WriteLine($"❌ Error refreshing game state: {ex.Message}");

        }

    }



    private async Task DrawCivic()

    {

        await GameApi.DrawCard(gameId, playerId, "civic");

        await RefreshGameState();

    }



    private async Task DrawMilitary()

    {

        await GameApi.DrawCard(gameId, playerId, "military");

        await RefreshGameState();

    }
}
