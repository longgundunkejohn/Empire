@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@using Empire.Shared.DTOs

<h2>Available Games</h2>

@if (games == null)
{
    <p>Loading...</p>
}
else if (games.Count == 0)
{
    <p>No open games yet.</p>
}
else
{
    <ul>
        @foreach (var g in games)
        {
            <li>
                <strong>@g.HostPlayer</strong> – Game ID: @g.GameId
                @if (g.IsJoinable)
                {
                    <input placeholder="Enter your Player ID" @bind="joinName" />
                    <button @onclick="() => Join(g.GameId)">Join</button>
                }
                else
                {
                    <em>Full</em>
                }
            </li>
        }
    </ul>
}

@code {
    private List<GamePreview>? games;
    private string joinName = "";

    // Fetch the list of open games on initial load
    protected override async Task OnInitializedAsync()
    {
        games = await GameApi.GetOpenGames();
    }

    // Function to join a game by sending a request to the backend
    private async Task Join(string gameId)
    {
        if (string.IsNullOrWhiteSpace(joinName))
        {
            // Handle empty player name
            return;  // You can show a message to the user if needed
        }

        var civicDeck = new List<int> { 101, 102 }; // Example deck IDs
        var militaryDeck = new List<int> { 103, 104 }; // Example deck IDs

        // Call the JoinGame API to add Player 2 to the game
        var success = await GameApi.JoinGame(gameId, joinName, civicDeck, militaryDeck);

        if (success)
        {
            // Navigate to the game page once successfully joined
            Nav.NavigateTo($"/game/{gameId}/{joinName}");
        }
        else
        {
            // Show an error message if joining fails (e.g., game is full)
            // You can add a notification here for the user
        }
    }
}
