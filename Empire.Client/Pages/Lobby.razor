@page "/lobby"
@inject HttpClient Http
@inject NavigationManager Nav
@using Microsoft.AspNetCore.Components.Forms
@using Empire.Shared.DTOs

<h2>Game Lobby</h2>

<hr />
<h3>Create Game</h3>

<select @bind="createName">
    <option disabled value="">-- Select Deck Owner --</option>
    @foreach (var player in availableDecks)
    {
        <option>@player</option>
    }
</select>

<button @onclick="CreateGame" disabled="@string.IsNullOrWhiteSpace(createName)">Create Game</button>

<br />
<br />
<InputFile OnChange="OnDeckUpload" accept=".csv" />
<input placeholder="New Deck Name" @bind="uploadName" />
<button @onclick="UploadDeck">Upload New Deck</button>

<hr />
<h3>Open Games</h3>

@if (games == null)
{
    <p>Loading games...</p>
}
else if (games.Count == 0)
{
    <p>No open games yet.</p>
}
else
{
    <ul>
        @foreach (var g in games)
        {
            <li>
                <strong>@g.HostPlayer</strong> – Game ID: @g.GameId

                @if (g.IsJoinable)
                {
                    @if (selectedGameId == g.GameId)
                    {
                        <select @bind="joinName">
                            <option disabled value="">-- Pick a Deck --</option>
                            @foreach (var player in availableDecks)
                            {
                                <option>@player</option>
                            }
                        </select>

                        <button @onclick="() => JoinGame(g.GameId)">Join Game</button>
                        <button @onclick="CancelJoin">Cancel</button>
                    }
                    else
                    {
                        <button @onclick="() => SelectGame(g.GameId)">Join</button>
                    }
                }
                else
                {
                    <em>Full</em>
                }
            </li>
        }
    </ul>
}

@code {
    private List<GamePreview>? games;
    private List<string> availableDecks = new();
    private IBrowserFile? uploadedDeck;

    private string createName = "";
    private string uploadName = "";
    private string joinName = "";
    private string selectedGameId = "";

    protected override async Task OnInitializedAsync()
    {
        games = await Http.GetFromJsonAsync<List<GamePreview>>("/api/game/open");
        availableDecks = await Http.GetFromJsonAsync<List<string>>("/api/prelobby/decks");
    }

    private void SelectGame(string gameId)
    {
        selectedGameId = gameId;
    }

    private void CancelJoin()
    {
        selectedGameId = "";
        joinName = "";
    }

    private void OnDeckUpload(InputFileChangeEventArgs e)
    {
        uploadedDeck = e.File;
    }

    private async Task UploadDeck()
    {
        if (uploadedDeck == null || string.IsNullOrWhiteSpace(uploadName)) return;

        var content = new MultipartFormDataContent();
        var stream = uploadedDeck.OpenReadStream(10_000_000);
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");

        content.Add(fileContent, "file", uploadedDeck.Name);

        var result = await Http.PostAsync($"/api/prelobby/upload?playerName={Uri.EscapeDataString(uploadName)}", content);

        if (result.IsSuccessStatusCode)
        {
            availableDecks.Add(uploadName);
            uploadName = "";
            uploadedDeck = null;
        }
    }

    private async Task CreateGame()
    {
        if (string.IsNullOrWhiteSpace(createName)) return;

        var request = new GameStartRequest { Player1 = createName };
        var response = await Http.PostAsJsonAsync("/api/game/create", request);
        var gameId = await response.Content.ReadAsStringAsync();
        Nav.NavigateTo($"/game/{gameId}/{createName}");
    }

    private async Task JoinGame(string gameId)
    {
        if (string.IsNullOrWhiteSpace(joinName)) return;

        var response = await Http.PostAsync($"/api/game/join/{gameId}/{joinName}", null);
        if (response.IsSuccessStatusCode)
        {
            Nav.NavigateTo($"/game/{gameId}/{joinName}");
        }
    }
}
