@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Empire.Client.Services
@using Empire.Shared.Models
@using Empire.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

<div class="container py-4">

    <h3>Empire Lobby</h3>

    <div class="mb-3">
        <label class="form-label">Your Name</label>
        <input type="text"
               class="form-control"
               placeholder="Enter your name"
               @bind="PlayerName"
               @bind:event="oninput" />
    </div>

    @if (DeckList?.Any() == true)

    {
        <div class="mb-3">
            <label class="form-label">Select Deck</label>
            <select class="form-select" @bind="SelectedDeckName">
                @foreach (var deck in DeckList)

                {
                    <option value="@deck.DeckName">@deck.DeckName</option>
                }
            </select>
        </div>
    }

    else if (!string.IsNullOrWhiteSpace(PlayerName))

    {
        <div class="mb-3">
            <p><em>No decks found for @PlayerName</em></p>
        </div>
    }

    <div class="mb-3">
        <button class="btn btn-primary me-2" @onclick="CreateGame" disabled="@(string.IsNullOrWhiteSpace(PlayerName) || string.IsNullOrWhiteSpace(SelectedDeckName))">Create Game</button>
    </div>

    <hr />

    <h4>Open Games</h4>
    @if (Games?.Any() == true)

    {
        <ul class="list-group">
            @foreach (var game in Games)

            {
                <li class="list-group-item d-flex justify-content-between align-items-center">
                    <div>
                        <strong>@game.GameId</strong> hosted by <em>@game.HostPlayer</em>
                    </div>
                    <button class="btn btn-success btn-sm" @onclick="() => JoinGame(game.GameId)">Join</button>
                </li>
            }
        </ul>
    }

    else

    {
        <p>No open games.</p>
    }

    <hr />

    <h4>Upload New Deck</h4>
    <div class="mb-3">
        <InputFile OnChange="HandleFileChange" accept=".csv" class="form-control" />
    </div>

    <div class="mb-3">
        <input type="text" class="form-control" placeholder="Deck Name (optional)" @bind="UploadDeckName" />
    </div>

    <div class="mb-3">
        <button class="btn btn-secondary" @onclick="UploadDeck" disabled="@(!CanUploadDeck)">Upload Deck</button>
    </div>

    @if (!string.IsNullOrWhiteSpace(UploadStatus))

    {
        <div class="alert alert-info">@UploadStatus</div>
    }

</div>

@code {
    private List<GamePreview> Games = new();

    private List<PlayerDeck> DeckList = new();



    private string PlayerName = string.Empty;

    private string SelectedDeckName = string.Empty;

    private string GameId = string.Empty;

    private string PlayerId = string.Empty;

    private GameState? GameState;



    private IBrowserFile? SelectedFile;

    private string UploadDeckName = string.Empty;

    private string UploadStatus = string.Empty;



    private bool CanUploadDeck => SelectedFile != null && !string.IsNullOrWhiteSpace(PlayerName);



    private void HandleFileChange(InputFileChangeEventArgs e)

    {

        SelectedFile = e.File;

        UploadStatus = $"📂 Selected: {SelectedFile.Name}";

    }



    private async Task UploadDeck()

    {

        if (SelectedFile == null || string.IsNullOrWhiteSpace(PlayerName)) return;



        try

        {

            var content = new MultipartFormDataContent();

            var fileStream = SelectedFile.OpenReadStream(512000);

            var fileContent = new StreamContent(fileStream);

            fileContent.Headers.ContentType = new MediaTypeHeaderValue("text/csv");



            content.Add(fileContent, "file", SelectedFile.Name);

            content.Add(new StringContent(PlayerName), "playerName");



            if (!string.IsNullOrWhiteSpace(UploadDeckName))

                content.Add(new StringContent(UploadDeckName), "deckName");



            var query = $"?playerName={Uri.EscapeDataString(PlayerName)}";

            if (!string.IsNullOrWhiteSpace(UploadDeckName))

                query += $"&deckName={Uri.EscapeDataString(UploadDeckName)}";



            var response = await Http.PostAsync($"api/prelobby/upload{query}", content);



            UploadStatus = response.IsSuccessStatusCode

                ? "✅ Upload successful!"

                : $"❌ Upload failed: {response.ReasonPhrase}";



            await LoadDecksForPlayer(PlayerName);

        }

        catch (Exception ex)

        {

            UploadStatus = $"❌ Upload failed: {ex.Message}";

        }

    }



    private async Task LoadDecksForPlayer(string player)

    {

        if (string.IsNullOrWhiteSpace(player)) return;



        try

        {

            DeckList = await GameApi.GetDecksForPlayer(player);

            SelectedDeckName = DeckList.FirstOrDefault()?.DeckName ?? string.Empty;

            StateHasChanged();

        }

        catch (Exception ex)

        {

            Console.WriteLine($"[Lobby] ❌ Failed to load decks for {player}: {ex.Message}");

        }

    }



    protected override async Task OnInitializedAsync()

    {

        try

        {

            Games = await GameApi.GetOpenGames();

        }

        catch (Exception ex)

        {

            Console.WriteLine($"[Lobby] ❌ Init error: {ex.Message}");

        }

    }



    private async Task CreateGame()

    {

        if (string.IsNullOrWhiteSpace(PlayerName) || string.IsNullOrWhiteSpace(SelectedDeckName)) return;



        var id = await GameApi.CreateGame(PlayerName, SelectedDeckName);

        if (string.IsNullOrWhiteSpace(id)) return;



        GameId = id;

        PlayerId = PlayerName;



        await RefreshGameState();

        Nav.NavigateTo($"/game/{GameId}/{PlayerId}");

    }



    private async Task JoinGame(string id)

    {

        if (string.IsNullOrWhiteSpace(PlayerName) || string.IsNullOrWhiteSpace(SelectedDeckName)) return;



        var selected = DeckList.FirstOrDefault(d => d.DeckName == SelectedDeckName);

        if (selected == null)

        {

            Console.WriteLine("❌ Deck not found.");

            return;

        }



        var success = await GameApi.JoinGame(id, PlayerName, selected.CivicDeck, selected.MilitaryDeck);



        if (success)

        {

            GameId = id;

            PlayerId = PlayerName;

            await RefreshGameState();

            Nav.NavigateTo($"/game/{GameId}/{PlayerId}");

        }

        else

        {

            Console.WriteLine("❌ Failed to join game.");

        }

    }



    private async Task RefreshGameState()

    {

        try

        {

            GameState = await GameApi.GetGameState(GameId);

        }

        catch (Exception ex)

        {

            Console.WriteLine($"❌ Error refreshing game state: {ex.Message}");

        }

    }
}
