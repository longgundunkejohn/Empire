@page "/lobby"
@inject GameApi GameApi
@inject NavigationManager Nav
@using Empire.Shared.DTOs
@inject HttpClient Http

<h2>Available Games</h2>

@if (games == null)
{
    <p>Loading...</p>
}
else if (games.Count == 0)
{
    <p>No open games yet.</p>
}
else
{
    <ul>
        @foreach (var g in games)
        {
            <li>
                <strong>@g.HostPlayer</strong> – Game ID: @g.GameId

                @if (g.IsJoinable)
                {
                    @if (selectedGameId == g.GameId)
                    {
                        <input placeholder="Your Name" @bind="joinName" />
                        <InputFile OnChange="OnDeckUpload" accept=".csv" />
                        <button @onclick="() => Join(g.GameId)">Upload & Join</button>
                        <button @onclick="CancelJoin">Cancel</button>
                    }
                    else
                    {
                        <button @onclick="() => SelectGame(g.GameId)">Join</button>
                    }
                }
                else
                {
                    <em>Full</em>
                }
            </li>
        }

    </ul>
}

@code {
    private string selectedGameId = "";
    IBrowserFile? uploadedDeck;
    private List<GamePreview>? games;
    private string joinName = "";

    // Fetch the list of open games on initial load
    protected override async Task OnInitializedAsync()
    {
        games = await GameApi.GetOpenGames();
    }

    private void SelectGame(string gameId)
    {
        selectedGameId = gameId;
        joinName = "";          // Reset input
        uploadedDeck = null;    // Reset file
    }

    private void CancelJoin()
    {
        selectedGameId = "";
        joinName = "";
        uploadedDeck = null;
    }

    private async Task OnDeckUpload(InputFileChangeEventArgs e)
    {
        uploadedDeck = e.File;
    }

    private async Task Join(string gameId)
    {
        if (string.IsNullOrWhiteSpace(joinName) || uploadedDeck is null)
            return;

        using var content = new MultipartFormDataContent();
        var stream = uploadedDeck.OpenReadStream(1024 * 1024);
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");
        content.Add(fileContent, "deckCsv", uploadedDeck.Name);
        content.Add(new StringContent(joinName), "playerName");

        var response = await Http.PostAsync($"api/game/uploadDeck/{gameId}", content);
        if (response.IsSuccessStatusCode)
        {
            Nav.NavigateTo($"/game/{gameId}/{joinName}");
        }
    }
}
