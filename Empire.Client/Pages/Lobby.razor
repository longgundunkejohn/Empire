@page "/lobby"

@using Empire.Shared.DTOs
@inject GameApi GameApi
@inject NavigationManager Nav
@inject HttpClient Http
@using Microsoft.AspNetCore.Components.Forms

<h2>Game Lobby</h2>

<hr />
<h3>Create Game</h3>
<div class="space-y-2">
    <input placeholder="Your Name" class="border p-2 rounded w-full" @bind="createName" />
    <InputFile OnChange="OnCreateDeckUpload" accept=".csv" />
    <button class="bg-green-600 text-white px-4 py-2 rounded" @onclick="CreateGame">Create Game</button>
</div>

<hr />
<h3>Open Games</h3>

@if (games == null)
{
    <p>Loading games...</p>
}
else if (games.Count == 0)
{
    <p>No open games yet.</p>
}
else
{
    <ul class="space-y-2">
        @foreach (var g in games)
        {
            <li class="border rounded p-2">
                <strong>@g.HostPlayer</strong> – Game ID: @g.GameId

                @if (g.IsJoinable)
                {
                    @if (selectedGameId == g.GameId)
                    {
                        <input placeholder="Your Name" @bind="joinName" />
                        <InputFile OnChange="OnJoinDeckUpload" accept=".csv" />
                        <button @onclick="() => JoinGame(g.GameId)">Upload & Join</button>
                        <button @onclick="CancelJoin">Cancel</button>
                    }
                    else
                    {
                        <button @onclick="() => SelectGame(g.GameId)">Join</button>
                    }
                }
                else
                {
                    <em>Full</em>
                }
            </li>
        }
    </ul>
}

@code {
    private List<GamePreview>? games;
    private string createName = "";
    private IBrowserFile? createDeck;

    private string selectedGameId = "";
    private string joinName = "";
    private IBrowserFile? joinDeck;

    protected override async Task OnInitializedAsync()
    {
        games = await GameApi.GetOpenGames();
    }

    private void OnCreateDeckUpload(InputFileChangeEventArgs e)
    {
        createDeck = e.File;
    }

    private void OnJoinDeckUpload(InputFileChangeEventArgs e)
    {
        joinDeck = e.File;
    }

    private void SelectGame(string gameId)
    {
        selectedGameId = gameId;
        joinName = "";
        joinDeck = null;
    }

    private void CancelJoin()
    {
        selectedGameId = "";
        joinName = "";
        joinDeck = null;
    }

    private async Task UploadDeck(string playerName, IBrowserFile file)
    {
        var content = new MultipartFormDataContent();
        var stream = file.OpenReadStream(10_000_000);
        var fileContent = new StreamContent(stream);
        fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue("text/csv");

        content.Add(fileContent, "file", file.Name);

        var response = await Http.PostAsync($"/api/prelobby/upload?playerName={Uri.EscapeDataString(playerName)}", content);
        if (!response.IsSuccessStatusCode)
        {
            var err = await response.Content.ReadAsStringAsync();
            throw new Exception($"Deck upload failed: {err}");
        }
    }

    private async Task CreateGame()
    {
        if (string.IsNullOrWhiteSpace(createName) || createDeck == null)
        {
            Console.WriteLine("Missing name or deck.");
            return;
        }

        try
        {
            await UploadDeck(createName, createDeck);

            var gameStart = new GameStartRequest { Player1 = createName };
            var response = await Http.PostAsJsonAsync("api/game/create", gameStart);
            var gameId = await response.Content.ReadAsStringAsync();

            Nav.NavigateTo($"/game/{gameId}/{createName}");
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
    }

    private async Task JoinGame(string gameId)
    {
        if (string.IsNullOrWhiteSpace(joinName) || joinDeck == null)
        {
            Console.WriteLine("Missing name or deck.");
            return;
        }

        try
        {
            await UploadDeck(joinName, joinDeck);

            var deckResponse = await Http.PostAsJsonAsync(
                $"api/game/join/{gameId}/{joinName}",
                new List<RawDeckEntry>()); // Empty because deck is loaded from DB on backend

            if (deckResponse.IsSuccessStatusCode)
            {
                Nav.NavigateTo($"/game/{gameId}/{joinName}");
            }
            else
            {
                var error = await deckResponse.Content.ReadAsStringAsync();
                Console.WriteLine($"Join failed: {error}");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Join error: {ex.Message}");
        }
    }
}
