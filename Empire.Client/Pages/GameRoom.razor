@page "/lobby/{lobbyId}"
@using Empire.Shared.Models
@using Empire.Client.Services
@using Empire.Client.Components
@inject HttpClient Http
@inject NavigationManager Navigation
@inject IJSRuntime JSRuntime
@inject AuthService AuthService
@inject GameHubService GameHubService
@implements IDisposable

<PageTitle>Game Room - @(lobby?.Name ?? "Loading...")</PageTitle>

<div class="game-room-container">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading game room...</span>
            </div>
            <h4 class="mt-3">Loading Game Room...</h4>
        </div>
    }
    else if (lobby == null)
    {
        <div class="error-container">
            <i class="fas fa-exclamation-triangle fa-3x text-warning mb-3"></i>
            <h4>Game Room Not Found</h4>
            <p>The game room you're looking for doesn't exist or has been closed.</p>
            <button class="btn btn-primary" @onclick="ReturnToLobby">
                <i class="fas fa-arrow-left"></i> Return to Lobby
            </button>
        </div>
    }
    else
    {
        <div class="game-room-header">
            <div class="room-info">
                <h2>@lobby.Name</h2>
                <span class="badge @GetStatusBadgeClass()">@lobby.Status</span>
            </div>
            <div class="room-actions">
                <button class="btn btn-outline-secondary" @onclick="ReturnToLobby">
                    <i class="fas fa-arrow-left"></i> Back to Lobby
                </button>
            </div>
        </div>

        <div class="game-room-content">
            <div class="row">
                <!-- Players Section -->
                <div class="col-lg-8">
                    <div class="players-section">
                        <h4>Players</h4>
                        <div class="players-grid">
                            <!-- Player 1 Slot -->
                            <div class="player-card @(lobby.Player1Id.HasValue ? "occupied" : "empty")">
                                <div class="player-header">
                                    <h5>Player 1</h5>
                                    @if (lobby.Player1Id.HasValue)
                                    {
                                        <span class="badge @GetPlayerReadyBadge(1)">
                                            @GetPlayerReadyText(1)
                                        </span>
                                    }
                                </div>
                                <div class="player-content">
                                    @if (lobby.Player1Id.HasValue)
                                    {
                                        <div class="player-info">
                                            <i class="fas fa-user fa-2x mb-2"></i>
                                            <p class="player-name">@lobby.Player1Username</p>
                                            @if (!string.IsNullOrEmpty(lobby.Player1DeckName))
                                            {
                                                <p class="deck-name">
                                                    <i class="fas fa-cards-blank"></i>
                                                    Deck: @lobby.Player1DeckName
                                                </p>
                                            }
                                        </div>
                                        @if (IsCurrentPlayer(lobby.Player1Id))
                                        {
                                            <div class="player-controls">
                                                @if (string.IsNullOrEmpty(lobby.Player1DeckName))
                                                {
                                                    <button class="btn btn-warning btn-sm" @onclick="SelectDeck">
                                                        <i class="fas fa-cards-blank"></i> Select Deck
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn @(lobby.Player1Ready ? "btn-success" : "btn-outline-success")" 
                                                            @onclick="ToggleReady">
                                                        <i class="fas @(lobby.Player1Ready ? "fa-check" : "fa-clock")"></i>
                                                        @(lobby.Player1Ready ? "Ready" : "Ready Up")
                                                    </button>
                                                }
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="empty-slot">
                                            <i class="fas fa-user-plus fa-2x mb-2"></i>
                                            <p>Waiting for player...</p>
                                            @if (!IsPlayerInGame())
                                            {
                                                <button class="btn btn-primary btn-sm" @onclick="() => JoinAsPlayer(1)">
                                                    <i class="fas fa-sign-in-alt"></i> Join
                                                </button>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>

                            <!-- Player 2 Slot -->
                            <div class="player-card @(lobby.Player2Id.HasValue ? "occupied" : "empty")">
                                <div class="player-header">
                                    <h5>Player 2</h5>
                                    @if (lobby.Player2Id.HasValue)
                                    {
                                        <span class="badge @GetPlayerReadyBadge(2)">
                                            @GetPlayerReadyText(2)
                                        </span>
                                    }
                                </div>
                                <div class="player-content">
                                    @if (lobby.Player2Id.HasValue)
                                    {
                                        <div class="player-info">
                                            <i class="fas fa-user fa-2x mb-2"></i>
                                            <p class="player-name">@lobby.Player2Username</p>
                                            @if (!string.IsNullOrEmpty(lobby.Player2DeckName))
                                            {
                                                <p class="deck-name">
                                                    <i class="fas fa-cards-blank"></i>
                                                    Deck: @lobby.Player2DeckName
                                                </p>
                                            }
                                        </div>
                                        @if (IsCurrentPlayer(lobby.Player2Id))
                                        {
                                            <div class="player-controls">
                                                @if (string.IsNullOrEmpty(lobby.Player2DeckName))
                                                {
                                                    <button class="btn btn-warning btn-sm" @onclick="SelectDeck">
                                                        <i class="fas fa-cards-blank"></i> Select Deck
                                                    </button>
                                                }
                                                else
                                                {
                                                    <button class="btn @(lobby.Player2Ready ? "btn-success" : "btn-outline-success")" 
                                                            @onclick="ToggleReady">
                                                        <i class="fas @(lobby.Player2Ready ? "fa-check" : "fa-clock")"></i>
                                                        @(lobby.Player2Ready ? "Ready" : "Ready Up")
                                                    </button>
                                                }
                                            </div>
                                        }
                                    }
                                    else
                                    {
                                        <div class="empty-slot">
                                            <i class="fas fa-user-plus fa-2x mb-2"></i>
                                            <p>Waiting for player...</p>
                                            @if (!IsPlayerInGame())
                                            {
                                                <button class="btn btn-primary btn-sm" @onclick="() => JoinAsPlayer(2)">
                                                    <i class="fas fa-sign-in-alt"></i> Join
                                                </button>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>

                        @if (CanStartGame())
                        {
                            <div class="game-start-section mt-4">
                                <div class="alert alert-success">
                                    <i class="fas fa-check-circle"></i>
                                    Both players are ready! The game can now begin.
                                </div>
                                @if (IsHost())
                                {
                                    <button class="btn btn-success btn-lg" @onclick="StartGame">
                                        <i class="fas fa-play"></i> Start Game
                                    </button>
                                }
                                else
                                {
                                    <p class="text-muted">Waiting for host to start the game...</p>
                                }
                            </div>
                        }
                    </div>
                </div>

                <!-- Sidebar -->
                <div class="col-lg-4">
                    <!-- Game Settings -->
                    <div class="game-settings mb-4">
                        <h5>Game Settings</h5>
                        <div class="settings-list">
                            <div class="setting-item">
                                <span class="setting-label">Time Limit:</span>
                                <span class="setting-value">@lobby.TimeLimit minutes per player</span>
                            </div>
                            <div class="setting-item">
                                <span class="setting-label">Deck Validation:</span>
                                <span class="setting-value">@(lobby.RequireDeckValidation ? "Required" : "Optional")</span>
                            </div>
                            <div class="setting-item">
                                <span class="setting-label">Spectators:</span>
                                <span class="setting-value">@(lobby.AllowSpectators ? $"Allowed ({lobby.Spectators.Count}/{lobby.MaxSpectators})" : "Not allowed")</span>
                            </div>
                        </div>
                    </div>

                    <!-- Spectators -->
                    @if (lobby.AllowSpectators)
                    {
                        <div class="spectators-section">
                            <h5>Spectators (@lobby.Spectators.Count/@lobby.MaxSpectators)</h5>
                            @if (lobby.Spectators.Any())
                            {
                                <div class="spectators-list">
                                    @foreach (var spectator in lobby.Spectators)
                                    {
                                        <div class="spectator-item">
                                            <i class="fas fa-eye"></i>
                                            <span>@spectator.Username</span>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <p class="text-muted">No spectators yet</p>
                            }
                            
                            @if (!IsPlayerInGame() && !IsSpectator() && lobby.Spectators.Count < lobby.MaxSpectators)
                            {
                                <button class="btn btn-outline-secondary btn-sm mt-2" @onclick="JoinAsSpectator">
                                    <i class="fas fa-eye"></i> Spectate
                                </button>
                            }
                        </div>
                    }

                    <!-- Room Info -->
                    <div class="room-info-section mt-4">
                        <h5>Room Info</h5>
                        <div class="info-list">
                            <div class="info-item">
                                <span class="info-label">Host:</span>
                                <span class="info-value">@lobby.HostUsername</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Created:</span>
                                <span class="info-value">@lobby.CreatedDate.ToString("MMM dd, HH:mm")</span>
                            </div>
                            <div class="info-item">
                                <span class="info-label">Room ID:</span>
                                <span class="info-value">@lobby.Id</span>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-4" role="alert">
            @errorMessage
            <button type="button" class="btn-close" @onclick="ClearError"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mt-4" role="alert">
            @successMessage
            <button type="button" class="btn-close" @onclick="ClearSuccess"></button>
        </div>
    }
</div>

<!-- Deck Selection Modal -->
<DeckSelectionModal IsVisible="showDeckSelection" 
                    IsVisibleChanged="OnDeckSelectionVisibilityChanged"
                    OnDeckSelected="OnDeckSelected" />

<style>
    .game-room-container {
        min-height: 100vh;
        background: linear-gradient(135deg, #1a1a2e 0%, #16213e 50%, #0f3460 100%);
        padding: 20px;
    }

    .loading-container, .error-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 60vh;
        color: white;
        text-align: center;
    }

    .game-room-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 20px;
        margin-bottom: 20px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .room-info h2 {
        margin: 0;
        color: #333;
    }

    .game-room-content {
        background: rgba(255, 255, 255, 0.95);
        border-radius: 12px;
        padding: 30px;
        box-shadow: 0 4px 8px rgba(0,0,0,0.1);
    }

    .players-grid {
        display: grid;
        grid-template-columns: 1fr 1fr;
        gap: 20px;
        margin-top: 20px;
    }

    .player-card {
        border: 2px solid #dee2e6;
        border-radius: 12px;
        padding: 20px;
        text-align: center;
        transition: all 0.3s ease;
    }

    .player-card.occupied {
        border-color: #28a745;
        background: #f8fff9;
    }

    .player-card.empty {
        border-color: #6c757d;
        border-style: dashed;
        background: #f8f9fa;
    }

    .player-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-bottom: 15px;
        padding-bottom: 10px;
        border-bottom: 1px solid #dee2e6;
    }

    .player-header h5 {
        margin: 0;
        color: #333;
    }

    .player-name {
        font-weight: 600;
        color: #333;
        margin: 10px 0;
    }

    .deck-name {
        font-size: 0.9rem;
        color: #666;
        margin: 5px 0;
    }

    .empty-slot {
        color: #6c757d;
        padding: 20px 0;
    }

    .player-controls {
        margin-top: 15px;
    }

    .game-start-section {
        text-align: center;
        padding: 20px;
        background: #f8f9fa;
        border-radius: 8px;
    }

    .game-settings, .spectators-section, .room-info-section {
        background: #f8f9fa;
        border-radius: 8px;
        padding: 20px;
    }

    .game-settings h5, .spectators-section h5, .room-info-section h5 {
        margin-bottom: 15px;
        color: #333;
        border-bottom: 2px solid #007bff;
        padding-bottom: 5px;
    }

    .settings-list, .info-list {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .setting-item, .info-item {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 8px 0;
        border-bottom: 1px solid #dee2e6;
    }

    .setting-label, .info-label {
        font-weight: 500;
        color: #666;
    }

    .setting-value, .info-value {
        color: #333;
    }

    .spectators-list {
        display: flex;
        flex-direction: column;
        gap: 8px;
    }

    .spectator-item {
        display: flex;
        align-items: center;
        gap: 8px;
        padding: 8px;
        background: white;
        border-radius: 4px;
        border: 1px solid #dee2e6;
    }

    .badge.bg-ready {
        background-color: #28a745 !important;
    }

    .badge.bg-not-ready {
        background-color: #ffc107 !important;
    }

    .badge.bg-waiting {
        background-color: #6c757d !important;
    }

    .badge.bg-in-progress {
        background-color: #17a2b8 !important;
    }

    @@media (max-width: 768px) {
        .game-room-container {
            padding: 10px;
        }

        .players-grid {
            grid-template-columns: 1fr;
        }

        .game-room-header {
            flex-direction: column;
            gap: 15px;
            text-align: center;
        }
    }
</style>

@code {
    [Parameter] public string LobbyId { get; set; } = "";

    private GameLobby? lobby;
    private bool isLoading = true;
    private string errorMessage = "";
    private string successMessage = "";
    private int? currentUserId;
    private bool isConnectedToSignalR = false;
    private bool showDeckSelection = false;

    protected override async Task OnInitializedAsync()
    {
        // Check authentication
        if (!await AuthService.IsAuthenticatedAsync())
        {
            Navigation.NavigateTo("/login");
            return;
        }

        // Get current user
        var user = await AuthService.GetCurrentUserAsync();
        currentUserId = user?.Id;

        // Connect to SignalR first
        await ConnectToGameRoom();

        // Load lobby data
        await LoadLobby();
    }

    private async Task LoadLobby()
    {
        try
        {
            isLoading = true;
            var response = await Http.GetAsync($"/api/lobby/{LobbyId}");
            
            if (response.IsSuccessStatusCode)
            {
                var json = await response.Content.ReadAsStringAsync();
                lobby = System.Text.Json.JsonSerializer.Deserialize<GameLobby>(json, new System.Text.Json.JsonSerializerOptions
                {
                    PropertyNameCaseInsensitive = true
                });
            }
            else if (response.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                lobby = null;
            }
            else
            {
                errorMessage = "Failed to load game room";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading game room: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private async Task ConnectToGameRoom()
    {
        try
        {
            await GameHubService.ConnectAsync();
            await GameHubService.JoinGameRoomAsync(LobbyId);
            
            // Subscribe to game room events
            GameHubService.OnPlayerJoined += OnPlayerJoined;
            GameHubService.OnPlayerLeft += OnPlayerLeft;
            GameHubService.OnPlayerReady += OnPlayerReady;
            GameHubService.OnGameStarted += OnGameStarted;
        }
        catch (Exception ex)
        {
            errorMessage = $"Failed to connect to game room: {ex.Message}";
        }
    }

    private async Task JoinAsPlayer(int slot)
    {
        try
        {
            var request = new { LobbyId = LobbyId, PlayerSlot = slot };
            var response = await Http.PostAsJsonAsync("/api/lobby/join", request);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Joined game successfully!";
                await LoadLobby();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to join game: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error joining game: {ex.Message}";
        }
    }

    private async Task JoinAsSpectator()
    {
        try
        {
            var request = new { LobbyId = LobbyId };
            var response = await Http.PostAsJsonAsync("/api/lobby/spectate", request);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = "Joined as spectator!";
                await LoadLobby();
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to join as spectator: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error joining as spectator: {ex.Message}";
        }
    }

    private async Task ToggleReady()
    {
        try
        {
            var isReady = IsCurrentPlayer(lobby?.Player1Id) ? !lobby.Player1Ready : !lobby.Player2Ready;
            var request = new { LobbyId = LobbyId, Ready = isReady };
            var response = await Http.PostAsJsonAsync("/api/lobby/ready", request);
            
            if (response.IsSuccessStatusCode)
            {
                await GameHubService.NotifyPlayerReadyAsync(LobbyId, isReady);
                await LoadLobby(); // Refresh lobby data to get updated ready status
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to update ready status: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error updating ready status: {ex.Message}";
        }
    }

    private async Task StartGame()
    {
        try
        {
            var response = await Http.PostAsync($"/api/lobby/{LobbyId}/start", null);
            
            if (response.IsSuccessStatusCode)
            {
                // Navigate to game page
                Navigation.NavigateTo($"/game/{LobbyId}");
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to start game: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error starting game: {ex.Message}";
        }
    }

    private void SelectDeck()
    {
        showDeckSelection = true;
        StateHasChanged();
    }

    private async Task OnDeckSelectionVisibilityChanged(bool isVisible)
    {
        showDeckSelection = isVisible;
        await InvokeAsync(StateHasChanged);
    }

    private async Task OnDeckSelected(UserDeck selectedDeck)
    {
        try
        {
            var request = new { LobbyId = LobbyId, DeckName = selectedDeck.Name };
            var response = await Http.PostAsJsonAsync("/api/lobby/deck", request);
            
            if (response.IsSuccessStatusCode)
            {
                successMessage = $"Selected deck: {selectedDeck.Name}";
                await LoadLobby(); // Refresh lobby data
            }
            else
            {
                var error = await response.Content.ReadAsStringAsync();
                errorMessage = $"Failed to select deck: {error}";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Error selecting deck: {ex.Message}";
        }
    }

    private void ReturnToLobby()
    {
        Navigation.NavigateTo("/lobby");
    }

    // Helper methods
    private bool IsCurrentPlayer(int? playerId) => currentUserId.HasValue && playerId == currentUserId;
    private bool IsPlayerInGame() => IsCurrentPlayer(lobby?.Player1Id) || IsCurrentPlayer(lobby?.Player2Id);
    private bool IsSpectator() => lobby?.Spectators.Any(s => s.UserId == currentUserId) == true;
    private bool IsHost() => currentUserId.HasValue && lobby?.HostUserId == currentUserId;
    private bool CanStartGame() => lobby?.CanStart == true && lobby.Player1Ready && lobby.Player2Ready;

    private string GetStatusBadgeClass()
    {
        return lobby?.Status switch
        {
            LobbyStatus.WaitingForPlayers => "badge bg-warning",
            LobbyStatus.ReadyToStart => "badge bg-success",
            LobbyStatus.InProgress => "badge bg-info",
            LobbyStatus.Completed => "badge bg-secondary",
            _ => "badge bg-secondary"
        };
    }

    private string GetPlayerReadyBadge(int playerSlot)
    {
        var isReady = playerSlot == 1 ? lobby?.Player1Ready == true : lobby?.Player2Ready == true;
        return isReady ? "badge bg-ready" : "badge bg-not-ready";
    }

    private string GetPlayerReadyText(int playerSlot)
    {
        var isReady = playerSlot == 1 ? lobby?.Player1Ready == true : lobby?.Player2Ready == true;
        return isReady ? "Ready" : "Not Ready";
    }

    // SignalR event handlers
    private async Task OnPlayerJoined(string lobbyId, string username)
    {
        if (lobbyId == LobbyId)
        {
            successMessage = $"{username} joined the game";
            await LoadLobby();
        }
    }

    private async Task OnPlayerLeft(string lobbyId, string username)
    {
        if (lobbyId == LobbyId)
        {
            successMessage = $"{username} left the game";
            await LoadLobby();
        }
    }

    private async Task OnPlayerReady(string lobbyId, int playerId, bool ready)
    {
        if (lobbyId == LobbyId)
        {
            // Refresh lobby data to get updated ready status from server
            await LoadLobby();
        }
    }

    private async Task OnGameStarted(string lobbyId)
    {
        if (lobbyId == LobbyId)
        {
            Navigation.NavigateTo($"/game/{LobbyId}");
        }
    }

    private void ClearError() => errorMessage = "";
    private void ClearSuccess() => successMessage = "";

    public void Dispose()
    {
        // Leave the game room when disposing
        if (isConnectedToSignalR && !string.IsNullOrEmpty(LobbyId))
        {
            _ = GameHubService.LeaveGameRoomAsync(LobbyId);
        }
        
        // Unsubscribe from SignalR events
        if (GameHubService != null)
        {
            GameHubService.OnPlayerJoined -= OnPlayerJoined;
            GameHubService.OnPlayerLeft -= OnPlayerLeft;
            GameHubService.OnPlayerReady -= OnPlayerReady;
            GameHubService.OnGameStarted -= OnGameStarted;
        }
    }
}
