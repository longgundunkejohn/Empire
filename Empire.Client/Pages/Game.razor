@page "/game/{gameId}/{playerId}"
@inject GameApi GameApi
@using Empire.Shared.Models
@using Empire.Shared.Models.Enums

@if (gameState == null)

{
    <p>Loading game...</p>
}

else

{
    <div class="game-container">

        <!-- Enemy Hand -->
        <div class="hand enemy-hand">
            @foreach (var _ in OpponentHand)

            {
                <img src="images/Cards/cardback.png" class="card-image small" alt="Hidden card" />
            }
        </div>

        <!-- Shared Board -->
        <div class="board"
             @ondragover:preventDefault="true"
             @ondrop="OnCardDrop">
            @foreach (var boardCard in PlayerBoard)

            {

                var card = GetCardFromDeck(boardCard.CardId);

                if (card != null)

                {
                    <div class="card-slot">
                        <CardImage Card="card" />
                    </div>
                }

            }
        </div>

        <!-- Your Hand -->
        <div class="hand player-hand">
            @foreach (var card in PlayerHand)

            {
                <img src="@card.ImagePath"
                     class="card-image"
                     draggable="true"
                     @ondragstart="(e) => OnDragStart(card.CardId)"
                     alt="@card.Name" />
            }
        </div>
    </div>
}

@code {
    [Parameter] public string gameId { get; set; } = string.Empty;

    [Parameter] public string playerId { get; set; } = string.Empty;



    private GameState? gameState;

    private List<Card> AllCards = new();

    private int? draggedCardId = null;



    private List<int> HandCardIds => gameState?.PlayerHands.GetValueOrDefault(playerId) ?? new();



    private List<Card> PlayerHand => HandCardIds

        .Select(id => GetCardFromDeck(id))

        .Where(c => c != null)

        .ToList()!;



    private List<Card> OpponentHand => gameState?.PlayerHands

        .FirstOrDefault(p => p.Key != playerId).Value?

        .Select(id => new Card { CardId = id })?.ToList() ?? new();



    private List<BoardCard> PlayerBoard => gameState?.PlayerBoard.GetValueOrDefault(playerId) ?? new();



    protected override async Task OnInitializedAsync()

    {

        gameState = await GameApi.GetGameState(gameId);

        AllCards = gameState?.PlayerDecks.SelectMany(p => p.Value).ToList() ?? new();

    }



    private Card? GetCardFromDeck(int id) => AllCards.FirstOrDefault(c => c.CardId == id);



    private void OnDragStart(int cardId)

    {

        draggedCardId = cardId;

    }



    private async Task OnCardDrop()

    {

        if (draggedCardId.HasValue)

        {

            var move = new GameMove

                {

                    PlayerId = playerId,

                    MoveType = "PlayCard",

                    CardId = draggedCardId

                };



            await GameApi.SubmitMove(gameId, move);

            gameState = await GameApi.GetGameState(gameId);

            draggedCardId = null;

            StateHasChanged();

        }

    }
}
