@page "/game/{gameId}/{playerId}"
@inject GameApi GameApi
@inject NavigationManager NavigationManager
@inject GameHubService HubService
@inject BoardClientService BoardService
@using Empire.Client.Services
@using Empire.Shared.Models
@using Empire.Shared.Models.Enums
@using Microsoft.AspNetCore.SignalR.Client

@if (gameState == null)

{
    <p>Loading game...</p>
}

else

{
    <div class="game-layout">
        <div class="status-bar">
            <div class="morale">You: 20 | Opponent: 20</div>
            <div class="phase-info">Phase: Main • Initiative</div>
            <div class="controls">
                <button class="btn-pass">Pass</button>
                <button class="btn-commit">Commit</button>
            </div>
        </div>

        <div class="battlefield">
            <div class="territory-row">
                @for (int i = 0; i < 3; i++)

                {
                    <div class="territory-cell">
                        <div class="zone-label">Opponent Settlement</div>
                        <div class="card-image">[ ]</div>
                        <div class="zone-label">Territory</div>
                        <div class="card-image">[ ]</div>
                        <div class="zone-label">Your Settlement</div>
                        <div class="card-image">[ ]</div>
                    </div>
                }
            </div>
        </div>

        <div class="row">
            <div class="stack">
                <div class="zone-label">Units</div>
                <div class="card-row">
                    @foreach (var boardCard in PlayerBoard)
                    {

                        var card = GetCardFromDeck(boardCard.CardId);

                        if (card != null && card.Type?.ToLowerInvariant() != "villager" && card.Type?.ToLowerInvariant() != "settlement")

                        {
                            <CardComponent Card="card" OnClick="() => HandleCardClick(card)" OnDoubleClick="() => HandleCardDoubleClick(card)" />
                        }
                    }
                </div>
            </div>
            <div class="stack">
                <div class="zone-label">Villagers & Settlements</div>
                <div class="card-row">
                    @foreach (var boardCard in PlayerBoard)
                    {

                        var card = GetCardFromDeck(boardCard.CardId);

                        if (card != null && (card.Type?.ToLowerInvariant() == "villager" || card.Type?.ToLowerInvariant() == "settlement"))

                        {
                            <CardComponent Card="card" OnClick="() => HandleCardClick(card)" OnDoubleClick="() => HandleCardDoubleClick(card)" />
                        }
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="stack">
                <div class="zone-label">Hand</div>
                <div class="card-row @(isDragging ? "drag-over" : "")"
                @ondragover:preventDefault
                     @ondragenter="() => isDragging = true"
                     @ondragleave="() => isDragging = false"
                     @ondrop="OnCardDrop">
                    @foreach (var card in PlayerHand)
                    {
                        <img src="@card.ImagePath"
                             class="card-image"
                             draggable="true"
                             @ondragstart="(e) => OnDragStart(card.CardId)"
                        @oncontextmenu:preventDefault
                             @oncontextmenu="e => ShowZoomedCard(card, e)"
                             @onmousedown="e => { if (e.Button == 0 || e.Button == 2) HideZoomedCard(); }"
                             alt="@card.Name" />
                    }
                </div>
            </div>

            <div class="stack">
                <div class="zone-label">Decks</div>
                <div class="card-row">
                    <CardBackImage DeckCount="@MilitaryDeckCount" CardBackPath="Cardbacks/armyCardback.png" OnDraw="DrawMilitary" />
                    <CardBackImage DeckCount="@CivicDeckCount" CardBackPath="Cardbacks/civicCardback.png" OnDraw="DrawCivic" />
                </div>
            </div>
        </div>

        <div class="chat-box">
            <div class="chat-log">
                @foreach (var msg in ChatLog)

                {
                    <div><strong>@msg.PlayerId:</strong> @msg.Message</div>
                }
            </div>
            <input class="form-control" @bind="chatInput" @bind:event="oninput" @onkeydown="HandleChatKey" placeholder="Type message or /shuffle..." />
        </div>

        @if (ZoomedCard != null)

        {
            <div class="card-preview show" style="top:@PreviewYpx; left:@PreviewXpx;">
                <img src="@ZoomedCard.ImagePath" alt="@ZoomedCard.Name" class="card-image" />
            </div>
        }
    </div>
}

@code {
    [Parameter] public string gameId { get; set; } = string.Empty;

    [Parameter] public string playerId { get; set; } = string.Empty;



    private bool isDragging = false;

    private GameState? gameState;

    private List<Card> AllCards = new();

    private Card? ZoomedCard = null;

    private string PreviewXpx = "0px";

    private string PreviewYpx = "0px";

    private string chatInput = string.Empty;

    private List<(string PlayerId, string Message)> ChatLog = new();

    private int? draggedCardId = null;



    private List<int> HandCardIds => BoardService.GetHandIds(playerId);

    private List<Card> PlayerHand => HandCardIds.Select(id => GetCardFromDeck(id)).Where(c => c != null).ToList();

    private List<BoardCard> PlayerBoard => BoardService.GetBoard(playerId);



    private int CivicDeckCount => gameState?.PlayerDecks?.GetValueOrDefault(playerId)?.Count(c => c.Type?.ToLowerInvariant() is "villager" or "settlement") ?? 0;

    private int MilitaryDeckCount => gameState?.PlayerDecks?.GetValueOrDefault(playerId)?.Count(c => c.Type?.ToLowerInvariant() is not ("villager" or "settlement")) ?? 0;







    protected override async Task OnInitializedAsync()

    {

        gameState = await GameApi.GetGameState(gameId);



        var handIds = gameState?.PlayerHands?.SelectMany(kv => kv.Value) ?? Enumerable.Empty<int>();

        var boardIds = gameState?.PlayerBoard?.SelectMany(kv => kv.Value.Select(bc => bc.CardId)) ?? Enumerable.Empty<int>();

        var deckCards = gameState?.PlayerDecks?.SelectMany(kv => kv.Value) ?? Enumerable.Empty<Card>();



        var allIds = handIds

            .Concat(boardIds)

            .Concat(deckCards.Select(c => c.CardId))

            .Distinct()

            .ToList();



        AllCards = allIds.Select(id =>

            deckCards.FirstOrDefault(c => c.CardId == id) ?? new Card { CardId = id }

        ).ToList();



        await HubService.ConnectAsync(gameId);



        HubService.OnBoardUpdate += async (update) =>

        {

            if (update.GameId == gameId)

            {

                BoardService.SetBoard(update.PlayerId, update.NewOrder.Select(id => new BoardCard(id)).ToList());

                await RefreshGameState(); // re-hydrate cards that may have moved zones

            }

        };

    }







    private void HydrateCards()

    {

        var deckCards = gameState?.PlayerDecks?.SelectMany(kv => kv.Value) ?? Enumerable.Empty<Card>();

        var handCards = gameState?.PlayerHands?.SelectMany(kv => kv.Value.Select(id => new Card { CardId = id })) ?? Enumerable.Empty<Card>();

        var boardCards = gameState?.PlayerBoard?.SelectMany(kv => kv.Value.Select(bc => new Card { CardId = bc.CardId })) ?? Enumerable.Empty<Card>();



        AllCards = deckCards.Concat(handCards).Concat(boardCards)

            .GroupBy(c => c.CardId)

            .Select(g => g.First())

            .ToList();

    }















    private async Task RefreshGameState()

    {

        gameState = await GameApi.GetGameState(gameId);



        var handIds = gameState?.PlayerHands?.SelectMany(kv => kv.Value) ?? Enumerable.Empty<int>();

        var boardIds = gameState?.PlayerBoard?.SelectMany(kv => kv.Value.Select(bc => bc.CardId)) ?? Enumerable.Empty<int>();

        var deckCards = gameState?.PlayerDecks?.SelectMany(kv => kv.Value) ?? Enumerable.Empty<Card>();



        var allIds = handIds

            .Concat(boardIds)

            .Concat(deckCards.Select(c => c.CardId))

            .Distinct()

            .ToList();



        // Hydrate using deckCards first, fallback with Card stubs

        AllCards = allIds.Select(id =>

            deckCards.FirstOrDefault(c => c.CardId == id) ?? new Card { CardId = id }

        ).ToList();



        StateHasChanged();

    }





















    private async Task DrawCivic() => await Draw("civic");

    private async Task DrawMilitary() => await Draw("military");



    private async Task Draw(string type)

    {

        await GameApi.DrawCard(gameId, playerId, type);

        await RefreshGameState();

    }



    private async Task HandleChatKey(KeyboardEventArgs e)

    {

        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(chatInput))

        {

            var message = chatInput.Trim();

            if (message.StartsWith("/")) await HandleChatCommand(message);

            else ChatLog.Add((playerId, message));

            chatInput = string.Empty;

            StateHasChanged();

        }

    }



    private async Task HandleChatCommand(string command)

    {

        if (command.ToLowerInvariant() == "/shuffle")

        {

            var move = new GameMove { PlayerId = playerId, MoveType = "ShuffleDeck" };

            await GameApi.SubmitMove(gameId, move);

            ChatLog.Add((playerId, "🔀 shuffled their deck."));

        }

        else

        {

            ChatLog.Add((playerId, $"❓ Unknown command: {command}"));

        }

    }



    private void OnDragStart(int cardId) => draggedCardId = cardId;



    private async Task OnCardDrop()

    {

        if (!draggedCardId.HasValue) return;



        BoardService.MoveToBoard(playerId, draggedCardId.Value);



        var update = new BoardPositionUpdate

            {

                GameId = gameId,

                PlayerId = playerId,

                NewOrder = BoardService.GetBoard(playerId).Select(c => c.CardId).ToList()

            };



        await HubService.SendBoardUpdate(gameId, update);

        draggedCardId = null;

        StateHasChanged();

    }



    private Task HandleCardClick(Card card)

    {

        Console.WriteLine($"Clicked: {card.Name} (#{card.CardId})");

        return Task.CompletedTask;

    }



    private Task HandleCardDoubleClick(Card card)

    {

        Console.WriteLine($"Double-clicked: {card.Name} (#{card.CardId})");

        return Task.CompletedTask;

    }



    private void ShowZoomedCard(Card card, MouseEventArgs e)

    {

        const int previewWidth = 300, previewHeight = 420, screenWidth = 1920, screenHeight = 1080;

        int offsetX = (e.ClientX + previewWidth + 30 > screenWidth) ? -previewWidth - 20 : 20;

        int offsetY = (e.ClientY + previewHeight + 30 > screenHeight) ? -previewHeight - 20 : 20;

        PreviewXpx = $"{e.ClientX + offsetX}px";

        PreviewYpx = $"{e.ClientY + offsetY}px";

        ZoomedCard = card;

    }



    private void HideZoomedCard() => ZoomedCard = null;



    private Card? GetCardFromDeck(int cardId) => AllCards.FirstOrDefault(c => c.CardId == cardId);
}
