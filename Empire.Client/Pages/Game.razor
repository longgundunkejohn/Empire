@page "/game/{gameId}/{playerId}"
@using Empire.Client.Services
@using Empire.Client.Components
@using Empire.Shared.Models
@using Empire.Shared.Models.Enums
@using Microsoft.AspNetCore.SignalR.Client

@if (isLoading)
{
    <div class="loading-container">
        <p>Loading game...</p>
        <div class="spinner"></div>
    </div>
}
else if (!string.IsNullOrEmpty(errorMessage))
{
    <div class="error-container">
        <p class="error-message">❌ @errorMessage</p>
        <button class="btn btn-primary" @onclick="RefreshGameState">Retry</button>
    </div>
}
else if (gameState == null)
{
    <div class="error-container">
        <p>Game not found</p>
        <button class="btn btn-secondary" @onclick="() => NavigationManager.NavigateTo('/lobby')">Back to Lobby</button>
    </div>
}
else
{
    <div class="game-layout">
        <div class="status-bar">
            <div class="morale">You: @PlayerLifeTotal | Opponent: @OpponentLifeTotal</div>
            <div class="phase-info">Phase: @CurrentPhase @(IsMyTurn ? "• Your Turn" : "• Opponent's Turn")</div>
            <div class="controls">
                <button class="btn-pass" @onclick="() => HandleChatCommand('/endturn')" disabled="@(!IsMyTurn)">End Turn</button>
                <button class="btn-commit" @onclick="() => HandleChatCommand('/shuffle')" disabled="@(!IsMyTurn)">Shuffle</button>
            </div>
        </div>

        <div class="battlefield">
            <div class="territory-row">
                @for (int i = 0; i < 3; i++)
                {
                    <div class="territory-cell">
                        <div class="zone-label">Opponent Settlement</div>
                        <div class="card-row drop-zone">
                            @if (OpponentBoard.Any())
                            {
                                @foreach (var boardCard in OpponentBoard.Where(bc => MockCardDataService.GetCardById(bc.CardId)?.CardType == "Settlement"))
                                {
                                    <CardComponent CardId="@boardCard.CardId" IsExerted="@boardCard.IsExerted" 
                                                   OnClick="HandleOpponentCardClick" OnDoubleClick="HandleOpponentCardDoubleClick" />
                                }
                            }
                        </div>
                        <div class="zone-label">Territory</div>
                        <div class="card-row drop-zone">
                            @if (OpponentBoard.Any())
                            {
                                @foreach (var boardCard in OpponentBoard.Where(bc => MockCardDataService.GetCardById(bc.CardId)?.CardType == "Unit"))
                                {
                                    <CardComponent CardId="@boardCard.CardId" IsExerted="@boardCard.IsExerted" 
                                                   OnClick="HandleOpponentCardClick" OnDoubleClick="HandleOpponentCardDoubleClick" />
                                }
                            }
                        </div>
                        <div class="zone-label">Your Settlement</div>
                        <div class="card-row drop-zone">
                            @foreach (var boardCard in PlayerBoard.Where(bc => MockCardDataService.GetCardById(bc.CardId)?.CardType == "Settlement"))
                            {
                                <CardComponent CardId="@boardCard.CardId" IsExerted="@boardCard.IsExerted" 
                                               OnClick="HandleCardClick" OnDoubleClick="HandleCardDoubleClick" />
                            }
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="row">
            <div class="stack">
                <div class="zone-label">Your Units</div>
                <div class="card-row drop-zone" @ondrop="OnCardDrop" @ondragover:preventDefault>
                    @foreach (var boardCard in PlayerBoard.Where(bc => MockCardDataService.GetCardById(bc.CardId)?.CardType == "Unit"))
                    {
                        <CardComponent CardId="@boardCard.CardId" IsExerted="@boardCard.IsExerted" 
                                       OnClick="HandleCardClick" OnDoubleClick="HandleCardDoubleClick" 
                                       OnDragStart="OnDragStart" />
                    }
                </div>
            </div>
            <div class="stack">
                <div class="zone-label">Your Villagers</div>
                <div class="card-row drop-zone" @ondrop="OnCardDrop" @ondragover:preventDefault>
                    @foreach (var boardCard in PlayerBoard.Where(bc => MockCardDataService.GetCardById(bc.CardId)?.CardType == "Villager"))
                    {
                        <CardComponent CardId="@boardCard.CardId" IsExerted="@boardCard.IsExerted" 
                                       OnClick="HandleCardClick" OnDoubleClick="HandleCardDoubleClick" 
                                       OnDragStart="OnDragStart" />
                    }
                </div>
            </div>
        </div>

        <div class="row">
            <div class="stack">
                <div class="zone-label">Your Hand (@PlayerHand.Count cards)</div>
                <div class="hand-area">
                    @foreach (var cardId in PlayerHand)
                    {
                        <CardComponent CardId="@cardId" IsExerted="false" 
                                       OnClick="HandleHandCardClick" OnDoubleClick="HandleHandCardDoubleClick" 
                                       OnDragStart="OnDragStart" />
                    }
                    @if (!PlayerHand.Any())
                    {
                        <div style="color: #888; font-style: italic;">No cards in hand</div>
                    }
                </div>
            </div>

            <div class="stack">
                <div class="zone-label">Decks</div>
                <div class="card-row">
                    <CardBackImage DeckCount="@MilitaryDeckCount" CardBackPath="Cardbacks/armyCardback.png" OnDraw="DrawMilitary" />
                    <CardBackImage DeckCount="@CivicDeckCount" CardBackPath="Cardbacks/civicCardback.png" OnDraw="DrawCivic" />
                </div>
            </div>
        </div>

        <div class="chat-box">
            <div class="chat-log">
                @foreach (var msg in ChatLog)
                {
                    <div><strong>@msg.PlayerId:</strong> @msg.Message</div>
                }
            </div>
            <input class="form-control" @bind="chatInput" @bind:event="oninput" @onkeydown="HandleChatKey" placeholder="Type message or /shuffle, /endturn..." />
        </div>

        @if (ZoomedCard != null)
        {
            <div class="card-preview show" style="top:@PreviewYpx; left:@PreviewXpx;">
                <img src="@ZoomedCard.ImagePath" alt="@ZoomedCard.Name" class="card-image" />
            </div>
        }
    </div>
}
