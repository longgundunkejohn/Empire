// Game.razor (Blazor page)
@page "/game/{gameId}/{playerId}"
@using Empire.Shared.Models
@inject GameApi GameApi

<h2>Your Life Total: @lifeTotal</h2>
<button @onclick="() => ModifyLife(1)">+1</button>
<button @onclick="() => ModifyLife(-1)">-1</button>
<button @onclick="UnexertAllCards">Unexert All</button>

<h2>Your Hand</h2>
<HandComponent Hand="@handCards" OnCardSelected="PlayCard" />

<h2>Your Deck</h2>
<div>
    <h3>Civic Deck</h3>
    <DeckComponent DeckCount="@civicCount" OnDraw="DrawCivic" CardBackImage="images/civicCardback.png" />
</div>
<div>
    <h3>Military Deck</h3>
    <DeckComponent DeckCount="@militaryCount" OnDraw="DrawMilitary" CardBackImage="images/armyCardback.png" />
</div>

<h2>Your Board</h2>
<!-- Render your own board cards here -->
<div class="board">
    @foreach (var boardCard in game?.PlayerBoard.GetValueOrDefault(playerId) ?? new List<BoardCard>())
    {
        var card = allCards.FirstOrDefault(c => c.CardId == boardCard.CardId);
        if (card != null)
        {
            <img src=$"images/{card.CardId}-{card.Name}.jpg" class="card" />
        }
    }
</div>

@code {
    [Parameter] public string gameId { get; set; } = default!;
    [Parameter] public string playerId { get; set; } = default!;

    private GameState? game;
    private List<Card> handCards = new();
    private List<Card> allCards = new();
    private int civicCount;
    private int militaryCount;
    private int lifeTotal = 25;

    protected override async Task OnInitializedAsync()
    {
        await LoadState();
    }

    private async Task LoadState()
    {
        game = await GameApi.GetGameState(gameId, playerId);

        if (game == null) return;

        allCards = await GameApi.GetDeck(gameId, playerId);

        if (game.PlayerLifeTotals.TryGetValue(playerId, out var hp))
            lifeTotal = hp;

        var handIds = game.PlayerHands.GetValueOrDefault(playerId, new());
        handCards = allCards.Where(c => handIds.Contains(c.CardId)).ToList();

        civicCount = game.PlayerDecks[playerId].CivicDeck.Count;
        militaryCount = game.PlayerDecks[playerId].MilitaryDeck.Count;
    }
    private async Task UnexertAllCards()
    {
        var move = new GameMove
            {
                PlayerId = playerId,
                MoveType = "UnexertAll"
            };

        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }

    private async Task ModifyLife(int amount)
    {
        var move = new GameMove
        {
            PlayerId = playerId,
            MoveType = amount > 0 ? "GainLife" : "LoseLife",
            Value = Math.Abs(amount)
        };
        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }

    private async Task DrawCivic()
    {
        var move = new GameMove { PlayerId = playerId, MoveType = "DrawCivicCard" };
        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }

    private async Task DrawMilitary()
    {
        var move = new GameMove { PlayerId = playerId, MoveType = "DrawMilitaryCard" };
        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }

    private async Task PlayCard(Card card)
    {
        var move = new GameMove
        {
            PlayerId = playerId,
            MoveType = "PlayCard",
            CardId = card.CardId
        };
        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }
}
