@page "/game/{gameId}/{playerId}"
@using Empire.Shared.Models
@inject GameApi GameApi

<h2>Your Hand</h2>
<HandComponent Hand="@handCards" OnCardSelected="PlayCard" />

<h2>Your Deck</h2>
<div>
    <h3>Civic Deck</h3>
    <DeckComponent DeckCount="@civicCount" OnDraw="DrawCivic" CardBackImage="images/civicCardback.png" />
</div>
<div>
    <h3>Military Deck</h3>
    <DeckComponent DeckCount="@militaryCount" OnDraw="DrawMilitary" CardBackImage="images/armyCardback.png" />
</div>

<h2>Your Board</h2>
<!-- Render your own board cards here, if applicable -->

@code {
    [Parameter] public string gameId { get; set; } = default!;
    [Parameter] public string playerId { get; set; } = default!;
    
    private GameState? game;
    private List<Card> handCards = new();
    private int civicCount;
    private int militaryCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadState();
    }

    private async Task LoadState()
    {
        game = await GameApi.GetGameState(gameId, playerId);

        if (game == null) return;

        var allCards = await GameApi.GetDeck(gameId, playerId);
        var handIds = game.PlayerHands[playerId];
        handCards = allCards.Where(c => handIds.Contains(c.CardId)).ToList();

        civicCount = game.PlayerDecks[playerId].CivicDeck.Count;
        militaryCount = game.PlayerDecks[playerId].MilitaryDeck.Count;
    }

    private async Task DrawCivic()
    {
        var move = new GameMove
        {
            PlayerId = playerId,
            MoveType = "DrawCivicCard"
        };

        await GameApi.SubmitMove(gameId, move);
        await LoadState();  // Reload the state after the move is applied
    }

    private async Task DrawMilitary()
    {
        var move = new GameMove
        {
            PlayerId = playerId,
            MoveType = "DrawMilitaryCard"
        };

        await GameApi.SubmitMove(gameId, move);
        await LoadState();  // Reload the state after the move is applied
    }

    private async Task PlayCard(Card card)
    {
        var move = new GameMove
        {
            PlayerId = playerId,
            MoveType = "PlayCard",
            CardId = card.CardId
        };

        await GameApi.SubmitMove(gameId, move);
        await LoadState();  // Reload the state after the move is applied
    }
}
