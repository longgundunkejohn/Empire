@page "/game/{gameId}/{playerId}"
@inject GameApi GameApi
@inject NavigationManager NavigationManager
@using Empire.Shared.Models
@using Empire.Shared.Models.Enums
@using Microsoft.AspNetCore.SignalR.Client

@if (gameState == null)

{
    <p>Loading game...</p>
}

else

{
    <div class="game-container">

        <!-- Enemy Hand -->
        <div class="hand enemy-hand">
            @foreach (var _ in OpponentHand)

            {
                <img src="images/Cards/cardback.png" class="card-image small" alt="Hidden card" />
            }
        </div>

        <!-- Shared Board -->
        <div class="board"
             @ondragover:preventDefault="true"
             @ondrop="OnCardDrop">
            @foreach (var boardCard in PlayerBoard)

            {

                var card = GetCardFromDeck(boardCard.CardId);

                if (card != null)

                {
                    <div class="card-slot">
                        <CardImage Card="card" />
                    </div>
                }

            }
        </div>

        <!-- Your Hand -->
        <div class="hand player-hand">
            @foreach (var card in PlayerHand)

            {
                <img src="@card.ImagePath"
                     class="card-image"
                     draggable="true"
                     @ondragstart="(e) => OnDragStart(card.CardId)"
                @oncontextmenu:preventDefault
                     @oncontextmenu="e => ShowZoomedCard(card, e)"
                     @onmousedown="e => { if (e.Button == 0 || e.Button == 2) HideZoomedCard(); }"
                     alt="@card.Name" />
            }
        </div>

    </div>
}
<section class="draw-decks" style="display: flex; justify-content: center; gap: 1rem; margin-top: 1rem;">
    <CardBackImage DeckCount="@CivicDeckCount" BackType="civic" OnDraw="DrawCivic" />
    <CardBackImage DeckCount="@MilitaryDeckCount" BackType="military" OnDraw="DrawMilitary" />
</section>

<!-- Chat UI -->
<div class="chat-container" style="margin-top: 2rem;">
    <div class="chat-log" style="max-height: 200px; overflow-y: auto; border: 1px solid #ccc; padding: 8px;">
        @foreach (var msg in ChatLog)

        {
            <div><strong>@msg.PlayerId:</strong> @msg.Message</div>
        }
    </div>

    <input class="form-control mt-2"
           @bind="chatInput"
           @bind:event="oninput"
           @onkeydown="HandleChatKey"
           placeholder="Type message or /shuffle..." />
</div>

@if (ZoomedCard != null)

{
    <div class="card-preview" style="top:@PreviewYpx; left:@PreviewXpx;">
        <img src="@ZoomedCard.ImagePath" alt="@ZoomedCard.Name" class="card-image" />
    </div>
}


{
    <div class="card-preview" style="top:@PreviewYpx; left:@PreviewXpx;">
        <img src="@ZoomedCard.ImagePath" alt="@ZoomedCard.Name" class="card-image" />
    </div>
}

@code {
    [Parameter] public string gameId { get; set; } = string.Empty;

    [Parameter] public string playerId { get; set; } = string.Empty;







    private Card? ZoomedCard = null;

    private string PreviewXpx = "0px";

    private string PreviewYpx = "0px";



    private void ShowZoomedCard(Card card, MouseEventArgs e)

    {
        ZoomedCard = card;

        PreviewXpx = $"{e.ClientX + 20}px";

        PreviewYpx = $"{e.ClientY + 20}px";

    }


    private void HideZoomedCard()

    {

        ZoomedCard = null;

    }





    private async Task ShuffleDeck()

    {

        var move = new GameMove

            {

                PlayerId = playerId,

                MoveType = "ShuffleDeck"

            };



        await GameApi.SubmitMove(gameId, move);

        Console.WriteLine("[Client] Sent shuffle move");



        // Update local game state

        gameState = await GameApi.GetGameState(gameId);

        AllCards = gameState?.PlayerDecks.SelectMany(p => p.Value).ToList() ?? new();

        StateHasChanged();

    }

    private int CivicDeckCount => gameState?.PlayerDecks

        .GetValueOrDefault(playerId)?

        .Count(c => c.Type?.ToLowerInvariant() is "villager" or "settlement") ?? 0;



    private int MilitaryDeckCount => gameState?.PlayerDecks

        .GetValueOrDefault(playerId)?

        .Count(c => c.Type?.ToLowerInvariant() is not ("villager" or "settlement")) ?? 0;



    private async Task DrawCivic()

    {

        await GameApi.DrawCard(gameId, playerId, "civic");

        await RefreshGameState();

    }



    private async Task DrawMilitary()

    {

        await GameApi.DrawCard(gameId, playerId, "military");

        await RefreshGameState();

    }



    private async Task RefreshGameState()

    {

        gameState = await GameApi.GetGameState(gameId);

        AllCards = gameState?.PlayerDecks.SelectMany(p => p.Value).ToList() ?? new();

        StateHasChanged();

    }











    private GameState? gameState;

    private List<Card> AllCards = new();

    private int? draggedCardId = null;



    private List<int> HandCardIds => gameState?.PlayerHands.GetValueOrDefault(playerId) ?? new();



    private List<Card> PlayerHand => HandCardIds

        .Select(id => GetCardFromDeck(id))

        .Where(c => c != null)

        .ToList()!;



    private List<Card> OpponentHand => gameState?.PlayerHands

        .FirstOrDefault(p => p.Key != playerId).Value?

        .Select(id => new Card { CardId = id })?.ToList() ?? new();





    private HubConnection? hub;



    private string chatInput = string.Empty;

    private List<(string PlayerId, string Message)> ChatLog = new();



    private async Task HandleChatKey(KeyboardEventArgs e)

    {

        if (e.Key == "Enter" && !string.IsNullOrWhiteSpace(chatInput))

        {

            var message = chatInput.Trim();



            // Commands like /shuffle

            if (message.StartsWith("/"))

            {

                await HandleChatCommand(message);

            }

            else

            {

                ChatLog.Add((playerId, message)); // Just local for now

            }



            chatInput = string.Empty;

            StateHasChanged();

        }

    }



    private async Task HandleChatCommand(string command)

    {

        switch (command.ToLowerInvariant())

        {

            case "/shuffle":

                await ShuffleDeck();

                ChatLog.Add((playerId, "🔀 shuffled their deck."));

                break;

            default:

                ChatLog.Add((playerId, $"❓ Unknown command: {command}"));

                break;

        }

    }





    private List<BoardCard> PlayerBoard => gameState?.PlayerBoard.GetValueOrDefault(playerId) ?? new();







    protected override async Task OnInitializedAsync()

    {

        gameState = await GameApi.GetGameState(gameId);

        AllCards = gameState?.PlayerDecks.SelectMany(p => p.Value).ToList() ?? new();



        // SignalR Setup

        hub = new HubConnectionBuilder()

            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))

            .WithAutomaticReconnect()

            .Build();







        hub.On<BoardPositionUpdate>("ReceiveBoardUpdate", async (update) =>

        {

            if (update.GameId == gameId)

            {

                Console.WriteLine($"🔁 Board updated by {update.PlayerId}");

                await RefreshGameState();

            }

        });









        await hub.StartAsync();

        await hub.SendAsync("JoinGameGroup", gameId);

    }









    private Card? GetCardFromDeck(int id) => AllCards.FirstOrDefault(c => c.CardId == id);



    private void OnDragStart(int cardId)

    {

        draggedCardId = cardId;

    }







    private async Task OnCardDrop()

    {

        if (draggedCardId.HasValue)

        {

            var currentBoard = PlayerBoard;



            var draggedCard = new BoardCard(draggedCardId.Value);







            // Hotwire: Remove if already exists (avoid duplicates)

            currentBoard.RemoveAll(c => c.CardId == draggedCardId.Value);



            // Snap to end of board grid

            currentBoard.Add(draggedCard);



            var newOrder = currentBoard.Select(c => c.CardId).ToList();



            // Send update to backend (you can store the order if needed later)

            var update = new BoardPositionUpdate

                {

                    GameId = gameId,

                    PlayerId = playerId,

                    NewOrder = newOrder

                };



            if (hub is not null)

                await hub.SendAsync("SendBoardUpdate", update);



            draggedCardId = null;

            StateHasChanged();

        }

    }

}
