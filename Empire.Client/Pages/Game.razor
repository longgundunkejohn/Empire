@page "/game/{gameId}/{playerId}"
@using Empire.Shared.Models
@inject GameApi GameApi

<div class="game-layout">
    <h2>Your Life Total: @lifeTotal</h2>
    <button @onclick="() => ModifyLife(1)">+1</button>
    <button @onclick="() => ModifyLife(-1)">-1</button>
    <button @onclick="UnexertAllCards">Unexert All</button>

    <section>
        <h3>Your Hand</h3>
        <HandComponent Hand="@handCards" OnCardSelected="PlayCard" />
    </section>

    <section>
        <h3>Your Deck</h3>
        <div class="decks">
            <DeckComponent DeckCount="@civicCount" OnDraw="DrawCivic" CardBackImage="images/Cards/civicCardback.png" />
            <DeckComponent DeckCount="@militaryCount" OnDraw="DrawMilitary" CardBackImage="images/Cards/armyCardback.png" />
        </div>
    </section>

    <section>
        <h3>Your Board</h3>
        <div class="board">
            @foreach (var boardCard in game?.PlayerBoard.GetValueOrDefault(playerId) ?? Enumerable.Empty<BoardCard>())
            {
                var card = allCards.FirstOrDefault(c => c.CardId == boardCard.CardId);
                if (card != null)
                {
                    <picture>
                        <source srcset="@($"images/Cards/{Sanitize(card.CardId)}-{Sanitize(card.Name)}.png")" type="image/png" />
                        <source srcset="@($"images/Cards/{Sanitize(card.CardId)}-{Sanitize(card.Name)}.jpg")" type="image/jpeg" />
                        <img src="images/Cards/defaultCardback.png" class="card" />
                    </picture>
                }
            }
        </div>
    </section>
</div>

@code {
    [Parameter] public string gameId { get; set; } = default!;
    [Parameter] public string playerId { get; set; } = default!;

    private GameState? game;
    private List<Card> allCards = new();
    private List<Card> handCards = new();
    private int civicCount;
    private int militaryCount;
    private int lifeTotal = 25;

    protected override async Task OnInitializedAsync() => await LoadState();
    protected override async Task OnParametersSetAsync() => await LoadState();

    private async Task LoadState()
    {
        game = await GameApi.GetGameState(gameId, playerId);
        if (game == null) return;

        allCards = await GameApi.GetDeck(gameId, playerId);

        foreach (var card in allCards)
        {
            string safeName = Sanitize(card.Name);
            card.ImagePath = $"images/Cards/{card.CardId}-{safeName}.jpg";
        }

        if (game.PlayerLifeTotals.TryGetValue(playerId, out var hp))
            lifeTotal = hp;

        var handIds = game.PlayerHands.GetValueOrDefault(playerId, new());
        handCards = allCards.Where(c => handIds.Contains(c.CardId)).ToList();

        civicCount = game.PlayerDecks[playerId].CivicDeck.Count;
        militaryCount = game.PlayerDecks[playerId].MilitaryDeck.Count;
    }

    private string Sanitize(object? input)
    {
        string raw = input?.ToString() ?? "";
        return System.Text.RegularExpressions.Regex.Replace(raw, @"[^a-zA-Z0-9_-]", "");
    }

    private async Task UnexertAllCards()
    {
        await SubmitMove("UnexertAll");
    }

    private async Task ModifyLife(int amount)
    {
        await SubmitMove(amount > 0 ? "GainLife" : "LoseLife", Math.Abs(amount));
    }

    private async Task DrawCivic() => await SubmitMove("DrawCivicCard");
    private async Task DrawMilitary() => await SubmitMove("DrawMilitaryCard");

    private async Task PlayCard(Card card)
    {
        await SubmitMove("PlayCard", cardId: card.CardId);
    }

    private async Task SubmitMove(string moveType, int value = 0, int cardId = 0)
    {
        var move = new GameMove
        {
            PlayerId = playerId,
            MoveType = moveType,
            Value = value,
            CardId = cardId
        };

        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }
}
