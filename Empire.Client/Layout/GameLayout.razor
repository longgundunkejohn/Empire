@using Empire.Shared.Models
@inject HttpClient Http

<div class="game-layout">
    <div class="enemy-zone">
        <div>Enemy Hand</div>
        <div>Enemy Deck</div>
    </div>

    <div class="board-zone">
        <h4>Your Board</h4>
        @if (GameState?.PlayerBoard.TryGetValue(PlayerId, out var boardCards) == true)
        {
            <div class="card-row">
                @foreach (var boardCard in boardCards)
                {
                    var cardData = GetCardData(boardCard.CardId);
                    if (cardData != null)
                    {
                        <div class="card" @onclick="() => RotateCard(boardCard)">
                            <img src="@cardData.ImageFileName" alt="@cardData.Name"
                                 class="card-image @(boardCard.IsExerted ? "exerted" : "")" />
                            <div class="card-overlay">@cardData.Name</div>
                        </div>
                    }
                }
            </div>
        }
    </div>

    <div class="player-zone">
        <h4>Your Hand</h4>
        @if (GameState?.PlayerHands.TryGetValue(PlayerId, out var handIds) == true)
        {
            <div class="card-row">
                @foreach (var cardId in handIds)
                {
                    var cardData = GetCardData(cardId);
                    if (cardData != null)
                    {
                        <div class="card" @onclick="() => PlayCard(cardId)">
                            <img src="@cardData.ImageFileName" alt="@cardData.Name" class="card-image" />
                            <div class="card-overlay">@cardData.Name</div>
                        </div>
                    }
                }
            </div>
        }

        <div class="decks">
            <div>Player Deck</div>
            <div>Graveyard</div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string PlayerId { get; set; }

    [Parameter]
    public GameState? GameState { get; set; }

    private List<CardData> allCards = new();

    protected override async Task OnInitializedAsync()
    {
        allCards = await Http.GetFromJsonAsync<List<CardData>>("/api/card") ?? new List<CardData>();
    }

    private CardData? GetCardData(int cardId)
    {
        return allCards.FirstOrDefault(c => c.CardID == cardId);
    }

    private void RotateCard(BoardCard card)
    {
        card.Rotate(); // this toggles IsExerted
        Console.WriteLine($"[Client] Rotated card {card.CardId} → {card.IsExerted}");
    }

    private void PlayCard(int cardId)
    {
        Console.WriteLine($"[Client] Played card {cardId}");
    }
}
