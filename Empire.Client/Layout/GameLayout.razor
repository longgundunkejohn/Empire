@using Empire.Shared.Models
@inject GameApi GameApi

<div class="game-layout">

    <!-- Enemy Area -->
    <div class="enemy-zone">
        <div class="enemy-hand">[Enemy Hand Placeholder]</div>
        <div class="enemy-deck">[Enemy Deck Placeholder]</div>
    </div>

    <!-- Board Area -->
    <div class="board-zone">
        <h3>Board</h3>
        <div class="board">
            @foreach (var boardCard in game?.PlayerBoard.GetValueOrDefault(playerId) ?? new())
            {
                var card = allCards.FirstOrDefault(c => c.CardId == boardCard.CardId);
                if (card != null)
                {
                    <CardComponent Card="card" />
                }
            }
        </div>
    </div>

    <!-- Player Area -->
    <div class="player-zone">
        <div class="hand">
            <HandComponent Hand="@handCards" OnCardSelected="PlayCard" />
        </div>
        <div class="decks">
            <DeckComponent DeckCount="@civicCount" OnDraw="DrawCivic" CardBackImage="images/Cards/civicCardback.png" />
            <DeckComponent DeckCount="@militaryCount" OnDraw="DrawMilitary" CardBackImage="images/Cards/armyCardback.png" />
        </div>
    </div>

</div>

@code {
    [Parameter] public string gameId { get; set; } = default!;
    [Parameter] public string playerId { get; set; } = default!;

    private GameState? game;
    private List<Card> handCards = new();
    private List<Card> allCards = new();
    private int civicCount;
    private int militaryCount;

    protected override async Task OnInitializedAsync()
    {
        await LoadState();
    }

    private async Task LoadState()
    {
        game = await GameApi.GetGameState(gameId, playerId);
        if (game == null) return;

        allCards = await GameApi.GetDeck(gameId, playerId);

        foreach (var card in allCards)
        {
            string safeName = Sanitize(card.Name);
            card.ImagePath = $"images/Cards/{card.CardId} - {safeName}.jpg";
        }

        var handIds = game.PlayerHands.GetValueOrDefault(playerId, new());
        handCards = allCards.Where(c => handIds.Contains(c.CardId)).ToList();

        civicCount = game.PlayerDecks[playerId].CivicDeck.Count;
        militaryCount = game.PlayerDecks[playerId].MilitaryDeck.Count;
    }

    private string Sanitize(string? input)
    {
        return System.Text.RegularExpressions.Regex.Replace(input ?? "", "[^a-zA-Z0-9 _-]", "");
    }

    private async Task DrawCivic()
    {
        var move = new GameMove { PlayerId = playerId, MoveType = "DrawCivicCard" };
        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }

    private async Task DrawMilitary()
    {
        var move = new GameMove { PlayerId = playerId, MoveType = "DrawMilitaryCard" };
        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }

    private async Task PlayCard(Card card)
    {
        var move = new GameMove { PlayerId = playerId, MoveType = "PlayCard", CardId = card.CardId };
        await GameApi.SubmitMove(gameId, move);
        await LoadState();
    }
}
